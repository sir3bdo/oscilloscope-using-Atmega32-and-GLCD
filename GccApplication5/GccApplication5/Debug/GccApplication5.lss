
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000232  00800060  00001b02  00001b96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800292  00800292  00001dc8  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b6c  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000830  00000000  00000000  00003b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d0  00000000  00000000  000043b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b4  00000000  00000000  00004d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000742  00000000  00000000  0000533c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a62  00000000  00000000  00005a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000074e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__vector_11>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x71>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	12 e0       	ldi	r17, 0x02	; 2
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e2 e0       	ldi	r30, 0x02	; 2
      ea:	fb e1       	ldi	r31, 0x1B	; 27
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a2 39       	cpi	r26, 0x92	; 146
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	22 e0       	ldi	r18, 0x02	; 2
      fa:	a2 e9       	ldi	r26, 0x92	; 146
      fc:	b2 e0       	ldi	r27, 0x02	; 2
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a3 3a       	cpi	r26, 0xA3	; 163
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 2c 07 	call	0xe58	; 0xe58 <main>
     10c:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <DIO_voidSetPinDir>:
     114:	81 11       	cpse	r24, r1
     116:	1b c0       	rjmp	.+54     	; 0x14e <DIO_voidSetPinDir+0x3a>
     118:	41 30       	cpi	r20, 0x01	; 1
     11a:	59 f4       	brne	.+22     	; 0x132 <DIO_voidSetPinDir+0x1e>
     11c:	2a b3       	in	r18, 0x1a	; 26
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_voidSetPinDir+0x14>
     124:	88 0f       	add	r24, r24
     126:	99 1f       	adc	r25, r25
     128:	6a 95       	dec	r22
     12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_voidSetPinDir+0x10>
     12c:	82 2b       	or	r24, r18
     12e:	8a bb       	out	0x1a, r24	; 26
     130:	08 95       	ret
     132:	41 11       	cpse	r20, r1
     134:	62 c0       	rjmp	.+196    	; 0x1fa <DIO_voidSetPinDir+0xe6>
     136:	2a b3       	in	r18, 0x1a	; 26
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_voidSetPinDir+0x2e>
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	6a 95       	dec	r22
     144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_voidSetPinDir+0x2a>
     146:	80 95       	com	r24
     148:	82 23       	and	r24, r18
     14a:	8a bb       	out	0x1a, r24	; 26
     14c:	08 95       	ret
     14e:	81 30       	cpi	r24, 0x01	; 1
     150:	d9 f4       	brne	.+54     	; 0x188 <DIO_voidSetPinDir+0x74>
     152:	41 30       	cpi	r20, 0x01	; 1
     154:	59 f4       	brne	.+22     	; 0x16c <DIO_voidSetPinDir+0x58>
     156:	27 b3       	in	r18, 0x17	; 23
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_voidSetPinDir+0x4e>
     15e:	88 0f       	add	r24, r24
     160:	99 1f       	adc	r25, r25
     162:	6a 95       	dec	r22
     164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_voidSetPinDir+0x4a>
     166:	82 2b       	or	r24, r18
     168:	87 bb       	out	0x17, r24	; 23
     16a:	08 95       	ret
     16c:	41 11       	cpse	r20, r1
     16e:	45 c0       	rjmp	.+138    	; 0x1fa <DIO_voidSetPinDir+0xe6>
     170:	27 b3       	in	r18, 0x17	; 23
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_voidSetPinDir+0x68>
     178:	88 0f       	add	r24, r24
     17a:	99 1f       	adc	r25, r25
     17c:	6a 95       	dec	r22
     17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_voidSetPinDir+0x64>
     180:	80 95       	com	r24
     182:	82 23       	and	r24, r18
     184:	87 bb       	out	0x17, r24	; 23
     186:	08 95       	ret
     188:	82 30       	cpi	r24, 0x02	; 2
     18a:	d9 f4       	brne	.+54     	; 0x1c2 <DIO_voidSetPinDir+0xae>
     18c:	41 30       	cpi	r20, 0x01	; 1
     18e:	59 f4       	brne	.+22     	; 0x1a6 <DIO_voidSetPinDir+0x92>
     190:	24 b3       	in	r18, 0x14	; 20
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_voidSetPinDir+0x88>
     198:	88 0f       	add	r24, r24
     19a:	99 1f       	adc	r25, r25
     19c:	6a 95       	dec	r22
     19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_voidSetPinDir+0x84>
     1a0:	82 2b       	or	r24, r18
     1a2:	84 bb       	out	0x14, r24	; 20
     1a4:	08 95       	ret
     1a6:	41 11       	cpse	r20, r1
     1a8:	28 c0       	rjmp	.+80     	; 0x1fa <DIO_voidSetPinDir+0xe6>
     1aa:	24 b3       	in	r18, 0x14	; 20
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_voidSetPinDir+0xa2>
     1b2:	88 0f       	add	r24, r24
     1b4:	99 1f       	adc	r25, r25
     1b6:	6a 95       	dec	r22
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_voidSetPinDir+0x9e>
     1ba:	80 95       	com	r24
     1bc:	82 23       	and	r24, r18
     1be:	84 bb       	out	0x14, r24	; 20
     1c0:	08 95       	ret
     1c2:	83 30       	cpi	r24, 0x03	; 3
     1c4:	d1 f4       	brne	.+52     	; 0x1fa <DIO_voidSetPinDir+0xe6>
     1c6:	41 30       	cpi	r20, 0x01	; 1
     1c8:	59 f4       	brne	.+22     	; 0x1e0 <DIO_voidSetPinDir+0xcc>
     1ca:	21 b3       	in	r18, 0x11	; 17
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_voidSetPinDir+0xc2>
     1d2:	88 0f       	add	r24, r24
     1d4:	99 1f       	adc	r25, r25
     1d6:	6a 95       	dec	r22
     1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_voidSetPinDir+0xbe>
     1da:	82 2b       	or	r24, r18
     1dc:	81 bb       	out	0x11, r24	; 17
     1de:	08 95       	ret
     1e0:	41 11       	cpse	r20, r1
     1e2:	0b c0       	rjmp	.+22     	; 0x1fa <DIO_voidSetPinDir+0xe6>
     1e4:	21 b3       	in	r18, 0x11	; 17
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_voidSetPinDir+0xdc>
     1ec:	88 0f       	add	r24, r24
     1ee:	99 1f       	adc	r25, r25
     1f0:	6a 95       	dec	r22
     1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_voidSetPinDir+0xd8>
     1f4:	80 95       	com	r24
     1f6:	82 23       	and	r24, r18
     1f8:	81 bb       	out	0x11, r24	; 17
     1fa:	08 95       	ret

000001fc <DIO_voidSetPinValue>:
     1fc:	81 11       	cpse	r24, r1
     1fe:	1b c0       	rjmp	.+54     	; 0x236 <DIO_voidSetPinValue+0x3a>
     200:	41 30       	cpi	r20, 0x01	; 1
     202:	59 f4       	brne	.+22     	; 0x21a <DIO_voidSetPinValue+0x1e>
     204:	2b b3       	in	r18, 0x1b	; 27
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_voidSetPinValue+0x14>
     20c:	88 0f       	add	r24, r24
     20e:	99 1f       	adc	r25, r25
     210:	6a 95       	dec	r22
     212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_voidSetPinValue+0x10>
     214:	82 2b       	or	r24, r18
     216:	8b bb       	out	0x1b, r24	; 27
     218:	08 95       	ret
     21a:	41 11       	cpse	r20, r1
     21c:	62 c0       	rjmp	.+196    	; 0x2e2 <DIO_voidSetPinValue+0xe6>
     21e:	2b b3       	in	r18, 0x1b	; 27
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_voidSetPinValue+0x2e>
     226:	88 0f       	add	r24, r24
     228:	99 1f       	adc	r25, r25
     22a:	6a 95       	dec	r22
     22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_voidSetPinValue+0x2a>
     22e:	80 95       	com	r24
     230:	82 23       	and	r24, r18
     232:	8b bb       	out	0x1b, r24	; 27
     234:	08 95       	ret
     236:	81 30       	cpi	r24, 0x01	; 1
     238:	d9 f4       	brne	.+54     	; 0x270 <DIO_voidSetPinValue+0x74>
     23a:	41 30       	cpi	r20, 0x01	; 1
     23c:	59 f4       	brne	.+22     	; 0x254 <DIO_voidSetPinValue+0x58>
     23e:	28 b3       	in	r18, 0x18	; 24
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_voidSetPinValue+0x4e>
     246:	88 0f       	add	r24, r24
     248:	99 1f       	adc	r25, r25
     24a:	6a 95       	dec	r22
     24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_voidSetPinValue+0x4a>
     24e:	82 2b       	or	r24, r18
     250:	88 bb       	out	0x18, r24	; 24
     252:	08 95       	ret
     254:	41 11       	cpse	r20, r1
     256:	45 c0       	rjmp	.+138    	; 0x2e2 <DIO_voidSetPinValue+0xe6>
     258:	28 b3       	in	r18, 0x18	; 24
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_voidSetPinValue+0x68>
     260:	88 0f       	add	r24, r24
     262:	99 1f       	adc	r25, r25
     264:	6a 95       	dec	r22
     266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_voidSetPinValue+0x64>
     268:	80 95       	com	r24
     26a:	82 23       	and	r24, r18
     26c:	88 bb       	out	0x18, r24	; 24
     26e:	08 95       	ret
     270:	82 30       	cpi	r24, 0x02	; 2
     272:	d9 f4       	brne	.+54     	; 0x2aa <DIO_voidSetPinValue+0xae>
     274:	41 30       	cpi	r20, 0x01	; 1
     276:	59 f4       	brne	.+22     	; 0x28e <DIO_voidSetPinValue+0x92>
     278:	25 b3       	in	r18, 0x15	; 21
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_voidSetPinValue+0x88>
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	6a 95       	dec	r22
     286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_voidSetPinValue+0x84>
     288:	82 2b       	or	r24, r18
     28a:	85 bb       	out	0x15, r24	; 21
     28c:	08 95       	ret
     28e:	41 11       	cpse	r20, r1
     290:	28 c0       	rjmp	.+80     	; 0x2e2 <DIO_voidSetPinValue+0xe6>
     292:	25 b3       	in	r18, 0x15	; 21
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_voidSetPinValue+0xa2>
     29a:	88 0f       	add	r24, r24
     29c:	99 1f       	adc	r25, r25
     29e:	6a 95       	dec	r22
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_voidSetPinValue+0x9e>
     2a2:	80 95       	com	r24
     2a4:	82 23       	and	r24, r18
     2a6:	85 bb       	out	0x15, r24	; 21
     2a8:	08 95       	ret
     2aa:	83 30       	cpi	r24, 0x03	; 3
     2ac:	d1 f4       	brne	.+52     	; 0x2e2 <DIO_voidSetPinValue+0xe6>
     2ae:	41 30       	cpi	r20, 0x01	; 1
     2b0:	59 f4       	brne	.+22     	; 0x2c8 <DIO_voidSetPinValue+0xcc>
     2b2:	22 b3       	in	r18, 0x12	; 18
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_voidSetPinValue+0xc2>
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	6a 95       	dec	r22
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_voidSetPinValue+0xbe>
     2c2:	82 2b       	or	r24, r18
     2c4:	82 bb       	out	0x12, r24	; 18
     2c6:	08 95       	ret
     2c8:	41 11       	cpse	r20, r1
     2ca:	0b c0       	rjmp	.+22     	; 0x2e2 <DIO_voidSetPinValue+0xe6>
     2cc:	22 b3       	in	r18, 0x12	; 18
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_voidSetPinValue+0xdc>
     2d4:	88 0f       	add	r24, r24
     2d6:	99 1f       	adc	r25, r25
     2d8:	6a 95       	dec	r22
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_voidSetPinValue+0xd8>
     2dc:	80 95       	com	r24
     2de:	82 23       	and	r24, r18
     2e0:	82 bb       	out	0x12, r24	; 18
     2e2:	08 95       	ret

000002e4 <DIO_voidGtPinValue>:
     2e4:	81 11       	cpse	r24, r1
     2e6:	09 c0       	rjmp	.+18     	; 0x2fa <DIO_voidGtPinValue+0x16>
     2e8:	89 b3       	in	r24, 0x19	; 25
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_voidGtPinValue+0xe>
     2ee:	95 95       	asr	r25
     2f0:	87 95       	ror	r24
     2f2:	6a 95       	dec	r22
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_voidGtPinValue+0xa>
     2f6:	81 70       	andi	r24, 0x01	; 1
     2f8:	08 95       	ret
     2fa:	81 30       	cpi	r24, 0x01	; 1
     2fc:	49 f4       	brne	.+18     	; 0x310 <DIO_voidGtPinValue+0x2c>
     2fe:	86 b3       	in	r24, 0x16	; 22
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_voidGtPinValue+0x24>
     304:	95 95       	asr	r25
     306:	87 95       	ror	r24
     308:	6a 95       	dec	r22
     30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_voidGtPinValue+0x20>
     30c:	81 70       	andi	r24, 0x01	; 1
     30e:	08 95       	ret
     310:	82 30       	cpi	r24, 0x02	; 2
     312:	49 f4       	brne	.+18     	; 0x326 <DIO_voidGtPinValue+0x42>
     314:	83 b3       	in	r24, 0x13	; 19
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_voidGtPinValue+0x3a>
     31a:	95 95       	asr	r25
     31c:	87 95       	ror	r24
     31e:	6a 95       	dec	r22
     320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_voidGtPinValue+0x36>
     322:	81 70       	andi	r24, 0x01	; 1
     324:	08 95       	ret
     326:	83 30       	cpi	r24, 0x03	; 3
     328:	49 f4       	brne	.+18     	; 0x33c <DIO_voidGtPinValue+0x58>
     32a:	80 b3       	in	r24, 0x10	; 16
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_voidGtPinValue+0x50>
     330:	95 95       	asr	r25
     332:	87 95       	ror	r24
     334:	6a 95       	dec	r22
     336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_voidGtPinValue+0x4c>
     338:	81 70       	andi	r24, 0x01	; 1
     33a:	08 95       	ret
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	08 95       	ret

00000340 <EXTI0_voidEnable>:
     340:	8b b7       	in	r24, 0x3b	; 59
     342:	80 64       	ori	r24, 0x40	; 64
     344:	8b bf       	out	0x3b, r24	; 59
     346:	08 95       	ret

00000348 <EXTI0_voidDisable>:
     348:	8b b7       	in	r24, 0x3b	; 59
     34a:	8f 7b       	andi	r24, 0xBF	; 191
     34c:	8b bf       	out	0x3b, r24	; 59
     34e:	08 95       	ret

00000350 <EXTI0_voidClearFlag>:
     350:	8a b7       	in	r24, 0x3a	; 58
     352:	80 64       	ori	r24, 0x40	; 64
     354:	8a bf       	out	0x3a, r24	; 58
     356:	08 95       	ret

00000358 <EXTI0_voidInit>:
     358:	85 b7       	in	r24, 0x35	; 53
     35a:	81 60       	ori	r24, 0x01	; 1
     35c:	85 bf       	out	0x35, r24	; 53
     35e:	85 b7       	in	r24, 0x35	; 53
     360:	82 60       	ori	r24, 0x02	; 2
     362:	85 bf       	out	0x35, r24	; 53
     364:	0e 94 a4 01 	call	0x348	; 0x348 <EXTI0_voidDisable>
     368:	0e 94 bd 01 	call	0x37a	; 0x37a <GIE_voidDisable>
     36c:	0e 94 a8 01 	call	0x350	; 0x350 <EXTI0_voidClearFlag>
     370:	08 95       	ret

00000372 <GIE_voidEnable>:
     372:	8f b7       	in	r24, 0x3f	; 63
     374:	80 68       	ori	r24, 0x80	; 128
     376:	8f bf       	out	0x3f, r24	; 63
     378:	08 95       	ret

0000037a <GIE_voidDisable>:
     37a:	8f b7       	in	r24, 0x3f	; 63
     37c:	8f 77       	andi	r24, 0x7F	; 127
     37e:	8f bf       	out	0x3f, r24	; 63
     380:	08 95       	ret

00000382 <GLCD_Command>:
unsigned int add1=0;
unsigned int add2=0;
unsigned int add3=0;
void GLCD_Command(char Command)		/* GLCD command function */
{
	Data_Port = Command;			/* Copy command on data pin */
     382:	8b bb       	out	0x1b, r24	; 27
	Command_Port &= ~(1 << RS);		/* Make RS LOW to select command register */
     384:	a8 98       	cbi	0x15, 0	; 21
	Command_Port &= ~(1 << RW);		/* Make RW LOW to select write operation */
     386:	a9 98       	cbi	0x15, 1	; 21
	Command_Port |=  (1 << EN);		/* Make HIGH to LOW transition on Enable pin */
     388:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     38a:	8d e0       	ldi	r24, 0x0D	; 13
     38c:	8a 95       	dec	r24
     38e:	f1 f7       	brne	.-4      	; 0x38c <GLCD_Command+0xa>
     390:	00 00       	nop
	_delay_us(5);
	Command_Port &= ~(1 << EN);
     392:	aa 98       	cbi	0x15, 2	; 21
     394:	8d e0       	ldi	r24, 0x0D	; 13
     396:	8a 95       	dec	r24
     398:	f1 f7       	brne	.-4      	; 0x396 <GLCD_Command+0x14>
     39a:	00 00       	nop
     39c:	08 95       	ret

0000039e <GLCD_Data>:
	_delay_us(5);
}

void GLCD_Data(char Data)			/* GLCD data function */
{
	Data_Port = Data;				/* Copy data on data pin */
     39e:	8b bb       	out	0x1b, r24	; 27
	Command_Port |=  (1 << RS);		/* Make RS HIGH to select data register */
     3a0:	a8 9a       	sbi	0x15, 0	; 21
	Command_Port &= ~(1 << RW);		/* Make RW LOW to select write operation */
     3a2:	a9 98       	cbi	0x15, 1	; 21
	Command_Port |=  (1 << EN);		/* Make HIGH to LOW transition on Enable pin */
     3a4:	aa 9a       	sbi	0x15, 2	; 21
     3a6:	8d e0       	ldi	r24, 0x0D	; 13
     3a8:	8a 95       	dec	r24
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <GLCD_Data+0xa>
     3ac:	00 00       	nop
	_delay_us(5);
	Command_Port &= ~(1 << EN);
     3ae:	aa 98       	cbi	0x15, 2	; 21
     3b0:	8d e0       	ldi	r24, 0x0D	; 13
     3b2:	8a 95       	dec	r24
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <GLCD_Data+0x14>
     3b6:	00 00       	nop
     3b8:	08 95       	ret

000003ba <GLCD_Init>:
	_delay_us(5);
}

void GLCD_Init()					/* GLCD initialize function */
{
	Data_Port_Dir = 0xFF;
     3ba:	8f ef       	ldi	r24, 0xFF	; 255
     3bc:	8a bb       	out	0x1a, r24	; 26
	Command_Port_Dir = 0xFF;
     3be:	84 bb       	out	0x14, r24	; 20
	/* Select both left & right half of display & Keep reset pin high */
	Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
     3c0:	85 b3       	in	r24, 0x15	; 21
     3c2:	88 63       	ori	r24, 0x38	; 56
     3c4:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c6:	8f e3       	ldi	r24, 0x3F	; 63
     3c8:	9c e9       	ldi	r25, 0x9C	; 156
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <GLCD_Init+0x10>
     3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <GLCD_Init+0x16>
     3d0:	00 00       	nop
	_delay_ms(20);
	GLCD_Command(0x3E);				/* Display OFF */
     3d2:	8e e3       	ldi	r24, 0x3E	; 62
     3d4:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
	GLCD_Command(0x40);				/* Set Y address (column=0) */
     3d8:	80 e4       	ldi	r24, 0x40	; 64
     3da:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
	GLCD_Command(0xB8);				/* Set x address (page=0) */
     3de:	88 eb       	ldi	r24, 0xB8	; 184
     3e0:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
	GLCD_Command(0xC0);				/* Set z address (start line=0) */
     3e4:	80 ec       	ldi	r24, 0xC0	; 192
     3e6:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
	GLCD_Command(0x3F);				/* Display ON */
     3ea:	8f e3       	ldi	r24, 0x3F	; 63
     3ec:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
     3f0:	08 95       	ret

000003f2 <GLCD_ClearAll>:
}

void GLCD_ClearAll()				/* GLCD all display clear function */
{
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
     3f8:	85 b3       	in	r24, 0x15	; 21
     3fa:	88 61       	ori	r24, 0x18	; 24
     3fc:	85 bb       	out	0x15, r24	; 21
     3fe:	18 eb       	ldi	r17, 0xB8	; 184
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);	/* Increment page each time after 64 column */
     400:	81 2f       	mov	r24, r17
     402:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
     406:	c0 e4       	ldi	r28, 0x40	; 64
     408:	d0 e0       	ldi	r29, 0x00	; 0
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);			/* Write zeros to all 64 column */
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_Data>
     410:	21 97       	sbiw	r28, 0x01	; 1
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);	/* Increment page each time after 64 column */
		for(j = 0; j < 64; j++)
     412:	d9 f7       	brne	.-10     	; 0x40a <GLCD_ClearAll+0x18>
     414:	1f 5f       	subi	r17, 0xFF	; 255
void GLCD_ClearAll()				/* GLCD all display clear function */
{
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
     416:	10 3c       	cpi	r17, 0xC0	; 192
     418:	99 f7       	brne	.-26     	; 0x400 <GLCD_ClearAll+0xe>
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);			/* Write zeros to all 64 column */
		}
	}
	GLCD_Command(0x40);				/* Set Y address (column=0) */
     41a:	80 e4       	ldi	r24, 0x40	; 64
     41c:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
	GLCD_Command(0xB8);				/* Set x address (page=0) */
     420:	88 eb       	ldi	r24, 0xB8	; 184
     422:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
}
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
     42c:	08 95       	ret

0000042e <GLCD_Stringright>:

void GLCD_Stringright(int page_no, char str[])			/* GLCD string write function */
{
     42e:	2f 92       	push	r2
     430:	3f 92       	push	r3
     432:	4f 92       	push	r4
     434:	5f 92       	push	r5
     436:	6f 92       	push	r6
     438:	7f 92       	push	r7
     43a:	8f 92       	push	r8
     43c:	9f 92       	push	r9
     43e:	af 92       	push	r10
     440:	bf 92       	push	r11
     442:	cf 92       	push	r12
     444:	df 92       	push	r13
     446:	ef 92       	push	r14
     448:	ff 92       	push	r15
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	28 97       	sbiw	r28, 0x08	; 8
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	cd bf       	out	0x3d, r28	; 61
     462:	8c 01       	movw	r16, r24
     464:	2b 01       	movw	r4, r22
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
     466:	7c 01       	movw	r14, r24
     468:	28 eb       	ldi	r18, 0xB8	; 184
     46a:	e2 0e       	add	r14, r18
     46c:	f1 1c       	adc	r15, r1
     46e:	67 01       	movw	r12, r14
	unsigned int Y_address = 0;
	float Page_inc = 0.5;
	if(add1!=Page){
     470:	80 91 9a 02 	lds	r24, 0x029A
     474:	90 91 9b 02 	lds	r25, 0x029B
     478:	8e 15       	cp	r24, r14
     47a:	9f 05       	cpc	r25, r15
     47c:	19 f0       	breq	.+6      	; 0x484 <GLCD_Stringright+0x56>
		GLCD_Command(0x40);	
     47e:	80 e4       	ldi	r24, 0x40	; 64
     480:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
	}
	add1=Page;
     484:	f0 92 9b 02 	sts	0x029B, r15
     488:	e0 92 9a 02 	sts	0x029A, r14
	Command_Port |= (1 << CS1);						
     48c:	ab 9a       	sbi	0x15, 3	; 21
	Command_Port &= ~(1 << CS2);
     48e:	ac 98       	cbi	0x15, 4	; 21
	
	GLCD_Command(Page);
     490:	8e 2d       	mov	r24, r14
     492:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
	for(i = 0; str[i] != 0; i++)					/* Print each char in string till null */
     496:	f2 01       	movw	r30, r4
     498:	90 81       	ld	r25, Z
     49a:	99 23       	and	r25, r25
     49c:	09 f4       	brne	.+2      	; 0x4a0 <GLCD_Stringright+0x72>
     49e:	68 c1       	rjmp	.+720    	; 0x770 <GLCD_Stringright+0x342>
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth))) /* Check Whether Total Display get overflowed */
     4a0:	11 95       	neg	r17
     4a2:	01 95       	neg	r16
     4a4:	11 09       	sbc	r17, r1
     4a6:	16 95       	lsr	r17
     4a8:	10 2f       	mov	r17, r16
     4aa:	00 27       	eor	r16, r16
     4ac:	17 95       	ror	r17
     4ae:	07 95       	ror	r16
     4b0:	98 01       	movw	r18, r16
     4b2:	25 50       	subi	r18, 0x05	; 5
     4b4:	3c 4f       	sbci	r19, 0xFC	; 252
     4b6:	3e 83       	std	Y+6, r19	; 0x06
     4b8:	2d 83       	std	Y+5, r18	; 0x05
void GLCD_Stringright(int page_no, char str[])			/* GLCD string write function */
{
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
	unsigned int Y_address = 0;
	float Page_inc = 0.5;
     4ba:	f1 2c       	mov	r15, r1
     4bc:	e1 2c       	mov	r14, r1
     4be:	81 2c       	mov	r8, r1
     4c0:	0f 2e       	mov	r0, r31
     4c2:	ff e3       	ldi	r31, 0x3F	; 63
     4c4:	9f 2e       	mov	r9, r31
     4c6:	f0 2d       	mov	r31, r0

void GLCD_Stringright(int page_no, char str[])			/* GLCD string write function */
{
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
	unsigned int Y_address = 0;
     4c8:	61 2c       	mov	r6, r1
     4ca:	71 2c       	mov	r7, r1
				{
					if (column == FontWidth)		/* Also check and break if it overflow after 5th column */
					break;
					GLCD_Command(0x40);				/* If not 5th and get overflowed then change Y address to START column */
					Y_address = Y_address + column;	/* Increment Y address count by column no. */
					Command_Port ^= (1 << CS1);		/* If yes then change segment controller to display on other half of display */
     4cc:	68 94       	set
     4ce:	33 24       	eor	r3, r3
     4d0:	33 f8       	bld	r3, 3
					Command_Port ^= (1 << CS2);
     4d2:	68 94       	set
     4d4:	22 24       	eor	r2, r2
     4d6:	24 f8       	bld	r2, 4
					GLCD_Command(Page + Page_inc);	/* Execute command for page change */
     4d8:	96 01       	movw	r18, r12
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	29 83       	std	Y+1, r18	; 0x01
     4e0:	3a 83       	std	Y+2, r19	; 0x02
     4e2:	4b 83       	std	Y+3, r20	; 0x03
     4e4:	5c 83       	std	Y+4, r21	; 0x04
     4e6:	bf 2c       	mov	r11, r15
     4e8:	ae 2c       	mov	r10, r14
     4ea:	06 c0       	rjmp	.+12     	; 0x4f8 <GLCD_Stringright+0xca>
	Command_Port &= ~(1 << CS2);
	
	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)					/* Print each char in string till null */
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth))) /* Check Whether Total Display get overflowed */
     4ec:	4d 81       	ldd	r20, Y+5	; 0x05
     4ee:	5e 81       	ldd	r21, Y+6	; 0x06
     4f0:	46 15       	cp	r20, r6
     4f2:	57 05       	cpc	r21, r7
     4f4:	08 f4       	brcc	.+2      	; 0x4f8 <GLCD_Stringright+0xca>
     4f6:	3c c1       	rjmp	.+632    	; 0x770 <GLCD_Stringright+0x342>
		break;										/* If yes then break writing */
		if (str[i]!=32)								/* Check whether character is not a SPACE */
     4f8:	90 32       	cpi	r25, 0x20	; 32
     4fa:	09 f4       	brne	.+2      	; 0x4fe <GLCD_Stringright+0xd0>
     4fc:	45 c0       	rjmp	.+138    	; 0x588 <GLCD_Stringright+0x15a>
     4fe:	01 e0       	ldi	r16, 0x01	; 1
     500:	10 e0       	ldi	r17, 0x00	; 0
		{
			for (column=1; column<=FontWidth; column++)
			{
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))	/* If yes then check whether it overflow from right side of display */
     502:	63 01       	movw	r12, r6
     504:	c0 0e       	add	r12, r16
     506:	d1 1e       	adc	r13, r17
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	5f e3       	ldi	r21, 0x3F	; 63
     510:	6b 2d       	mov	r22, r11
     512:	7a 2d       	mov	r23, r10
     514:	88 2d       	mov	r24, r8
     516:	99 2d       	mov	r25, r9
     518:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     51c:	e6 2e       	mov	r14, r22
     51e:	f7 2e       	mov	r15, r23
     520:	88 87       	std	Y+8, r24	; 0x08
     522:	9f 83       	std	Y+7, r25	; 0x07
     524:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__fixsfsi>
     528:	76 95       	lsr	r23
     52a:	76 2f       	mov	r23, r22
     52c:	66 27       	eor	r22, r22
     52e:	77 95       	ror	r23
     530:	67 95       	ror	r22
     532:	c6 16       	cp	r12, r22
     534:	d7 06       	cpc	r13, r23
     536:	11 f5       	brne	.+68     	; 0x57c <GLCD_Stringright+0x14e>
				{
					if (column == FontWidth)		/* Also check and break if it overflow after 5th column */
     538:	05 30       	cpi	r16, 0x05	; 5
     53a:	11 05       	cpc	r17, r1
     53c:	29 f1       	breq	.+74     	; 0x588 <GLCD_Stringright+0x15a>
					break;
					GLCD_Command(0x40);				/* If not 5th and get overflowed then change Y address to START column */
     53e:	80 e4       	ldi	r24, 0x40	; 64
     540:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
					Y_address = Y_address + column;	/* Increment Y address count by column no. */
					Command_Port ^= (1 << CS1);		/* If yes then change segment controller to display on other half of display */
     544:	85 b3       	in	r24, 0x15	; 21
     546:	83 25       	eor	r24, r3
     548:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
     54a:	85 b3       	in	r24, 0x15	; 21
     54c:	82 25       	eor	r24, r2
     54e:	85 bb       	out	0x15, r24	; 21
					GLCD_Command(Page + Page_inc);	/* Execute command for page change */
     550:	69 81       	ldd	r22, Y+1	; 0x01
     552:	7a 81       	ldd	r23, Y+2	; 0x02
     554:	8b 81       	ldd	r24, Y+3	; 0x03
     556:	9c 81       	ldd	r25, Y+4	; 0x04
     558:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatunsisf>
     55c:	2b 2d       	mov	r18, r11
     55e:	3a 2d       	mov	r19, r10
     560:	48 2d       	mov	r20, r8
     562:	59 2d       	mov	r21, r9
     564:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     568:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fixunssfsi>
     56c:	86 2f       	mov	r24, r22
     56e:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
					Page_inc = Page_inc + 0.5;		/* Increment Page No. by half */
     572:	be 2c       	mov	r11, r14
     574:	af 2c       	mov	r10, r15
     576:	88 84       	ldd	r8, Y+8	; 0x08
     578:	9f 80       	ldd	r9, Y+7	; 0x07
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))	/* If yes then check whether it overflow from right side of display */
				{
					if (column == FontWidth)		/* Also check and break if it overflow after 5th column */
					break;
					GLCD_Command(0x40);				/* If not 5th and get overflowed then change Y address to START column */
					Y_address = Y_address + column;	/* Increment Y address count by column no. */
     57a:	36 01       	movw	r6, r12
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth))) /* Check Whether Total Display get overflowed */
		break;										/* If yes then break writing */
		if (str[i]!=32)								/* Check whether character is not a SPACE */
		{
			for (column=1; column<=FontWidth; column++)
     57c:	0f 5f       	subi	r16, 0xFF	; 255
     57e:	1f 4f       	sbci	r17, 0xFF	; 255
     580:	06 30       	cpi	r16, 0x06	; 6
     582:	11 05       	cpc	r17, r1
     584:	09 f0       	breq	.+2      	; 0x588 <GLCD_Stringright+0x15a>
     586:	bd cf       	rjmp	.-134    	; 0x502 <GLCD_Stringright+0xd4>
					GLCD_Command(Page + Page_inc);	/* Execute command for page change */
					Page_inc = Page_inc + 0.5;		/* Increment Page No. by half */
				}
			}
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))   /* Check Whether Total Display get overflowed */
     588:	8d 81       	ldd	r24, Y+5	; 0x05
     58a:	9e 81       	ldd	r25, Y+6	; 0x06
     58c:	86 15       	cp	r24, r6
     58e:	97 05       	cpc	r25, r7
     590:	08 f4       	brcc	.+2      	; 0x594 <GLCD_Stringright+0x166>
     592:	ee c0       	rjmp	.+476    	; 0x770 <GLCD_Stringright+0x342>
		break;										/* If yes then break writing */
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)/* Check whether character is SPACE or character last column is zero */
     594:	f2 01       	movw	r30, r4
     596:	20 81       	ld	r18, Z
     598:	82 2f       	mov	r24, r18
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	80 97       	sbiw	r24, 0x20	; 32
     59e:	ac 01       	movw	r20, r24
     5a0:	44 0f       	add	r20, r20
     5a2:	55 1f       	adc	r21, r21
     5a4:	44 0f       	add	r20, r20
     5a6:	55 1f       	adc	r21, r21
     5a8:	84 0f       	add	r24, r20
     5aa:	95 1f       	adc	r25, r21
     5ac:	04 96       	adiw	r24, 0x04	; 4
     5ae:	ac 01       	movw	r20, r24
     5b0:	44 0f       	add	r20, r20
     5b2:	55 1f       	adc	r21, r21
     5b4:	44 0f       	add	r20, r20
     5b6:	55 1f       	adc	r21, r21
     5b8:	84 0f       	add	r24, r20
     5ba:	95 1f       	adc	r25, r21
     5bc:	80 5a       	subi	r24, 0xA0	; 160
     5be:	9f 4f       	sbci	r25, 0xFF	; 255
     5c0:	89 2b       	or	r24, r25
     5c2:	39 f0       	breq	.+14     	; 0x5d2 <GLCD_Stringright+0x1a4>
     5c4:	20 32       	cpi	r18, 0x20	; 32
     5c6:	09 f0       	breq	.+2      	; 0x5ca <GLCD_Stringright+0x19c>
     5c8:	51 c0       	rjmp	.+162    	; 0x66c <GLCD_Stringright+0x23e>
     5ca:	83 01       	movw	r16, r6
     5cc:	e1 2c       	mov	r14, r1
     5ce:	f1 2c       	mov	r15, r1
     5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <GLCD_Stringright+0x1aa>
     5d2:	83 01       	movw	r16, r6
     5d4:	e1 2c       	mov	r14, r1
     5d6:	f1 2c       	mov	r15, r1
		{
			for(column=0; column<FontWidth; column++)
			{
				GLCD_Data(font[str[i]-32][column]);	/* If yes then then print character */
     5d8:	f2 01       	movw	r30, r4
     5da:	80 81       	ld	r24, Z
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	80 97       	sbiw	r24, 0x20	; 32
     5e0:	fc 01       	movw	r30, r24
     5e2:	ee 0f       	add	r30, r30
     5e4:	ff 1f       	adc	r31, r31
     5e6:	ee 0f       	add	r30, r30
     5e8:	ff 1f       	adc	r31, r31
     5ea:	e8 0f       	add	r30, r24
     5ec:	f9 1f       	adc	r31, r25
     5ee:	ee 0d       	add	r30, r14
     5f0:	ff 1d       	adc	r31, r15
     5f2:	e0 5a       	subi	r30, 0xA0	; 160
     5f4:	ff 4f       	sbci	r31, 0xFF	; 255
     5f6:	80 81       	ld	r24, Z
     5f8:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_Data>
				if((Y_address+1)%64==0)				/* check whether it gets overflowed  from either half of side */
     5fc:	0f 5f       	subi	r16, 0xFF	; 255
     5fe:	1f 4f       	sbci	r17, 0xFF	; 255
     600:	c8 01       	movw	r24, r16
     602:	8f 73       	andi	r24, 0x3F	; 63
     604:	99 27       	eor	r25, r25
     606:	89 2b       	or	r24, r25
     608:	29 f5       	brne	.+74     	; 0x654 <GLCD_Stringright+0x226>
				{
					Command_Port ^= (1 << CS1);		/* If yes then change segment controller to display on other half of display */
     60a:	85 b3       	in	r24, 0x15	; 21
     60c:	83 25       	eor	r24, r3
     60e:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
     610:	85 b3       	in	r24, 0x15	; 21
     612:	82 25       	eor	r24, r2
     614:	85 bb       	out	0x15, r24	; 21
					GLCD_Command((Page+Page_inc));	/* Execute command for page change */
     616:	69 81       	ldd	r22, Y+1	; 0x01
     618:	7a 81       	ldd	r23, Y+2	; 0x02
     61a:	8b 81       	ldd	r24, Y+3	; 0x03
     61c:	9c 81       	ldd	r25, Y+4	; 0x04
     61e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatunsisf>
     622:	2b 2d       	mov	r18, r11
     624:	3a 2d       	mov	r19, r10
     626:	48 2d       	mov	r20, r8
     628:	59 2d       	mov	r21, r9
     62a:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     62e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fixunssfsi>
     632:	86 2f       	mov	r24, r22
     634:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
					Page_inc = Page_inc + 0.5;		/* Increment Page No. by half */
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e0       	ldi	r20, 0x00	; 0
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	6b 2d       	mov	r22, r11
     642:	7a 2d       	mov	r23, r10
     644:	88 2d       	mov	r24, r8
     646:	99 2d       	mov	r25, r9
     648:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     64c:	b6 2e       	mov	r11, r22
     64e:	a7 2e       	mov	r10, r23
     650:	88 2e       	mov	r8, r24
     652:	99 2e       	mov	r9, r25
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))   /* Check Whether Total Display get overflowed */
		break;										/* If yes then break writing */
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)/* Check whether character is SPACE or character last column is zero */
		{
			for(column=0; column<FontWidth; column++)
     654:	ff ef       	ldi	r31, 0xFF	; 255
     656:	ef 1a       	sub	r14, r31
     658:	ff 0a       	sbc	r15, r31
     65a:	25 e0       	ldi	r18, 0x05	; 5
     65c:	e2 16       	cp	r14, r18
     65e:	f1 04       	cpc	r15, r1
     660:	09 f0       	breq	.+2      	; 0x664 <GLCD_Stringright+0x236>
     662:	ba cf       	rjmp	.-140    	; 0x5d8 <GLCD_Stringright+0x1aa>
     664:	35 e0       	ldi	r19, 0x05	; 5
     666:	63 0e       	add	r6, r19
     668:	71 1c       	adc	r7, r1
     66a:	7b c0       	rjmp	.+246    	; 0x762 <GLCD_Stringright+0x334>
     66c:	83 01       	movw	r16, r6
     66e:	e1 2c       	mov	r14, r1
     670:	f1 2c       	mov	r15, r1
		}
		else										/* If character is not SPACE or character last column is not zero */
		{
			for(column=0; column<FontWidth; column++)
			{
				GLCD_Data(font[str[i]-32][column]); /* Then continue to print hat char */
     672:	f2 01       	movw	r30, r4
     674:	80 81       	ld	r24, Z
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	80 97       	sbiw	r24, 0x20	; 32
     67a:	fc 01       	movw	r30, r24
     67c:	ee 0f       	add	r30, r30
     67e:	ff 1f       	adc	r31, r31
     680:	ee 0f       	add	r30, r30
     682:	ff 1f       	adc	r31, r31
     684:	e8 0f       	add	r30, r24
     686:	f9 1f       	adc	r31, r25
     688:	ee 0d       	add	r30, r14
     68a:	ff 1d       	adc	r31, r15
     68c:	e0 5a       	subi	r30, 0xA0	; 160
     68e:	ff 4f       	sbci	r31, 0xFF	; 255
     690:	80 81       	ld	r24, Z
     692:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_Data>
				if((Y_address+1)%64==0)				/* check whether it gets overflowed  from either half of side */
     696:	0f 5f       	subi	r16, 0xFF	; 255
     698:	1f 4f       	sbci	r17, 0xFF	; 255
     69a:	c8 01       	movw	r24, r16
     69c:	8f 73       	andi	r24, 0x3F	; 63
     69e:	99 27       	eor	r25, r25
     6a0:	89 2b       	or	r24, r25
     6a2:	29 f5       	brne	.+74     	; 0x6ee <GLCD_Stringright+0x2c0>
				{
					Command_Port ^= (1 << CS1);		/* If yes then change segment controller to display on other half of display */
     6a4:	85 b3       	in	r24, 0x15	; 21
     6a6:	83 25       	eor	r24, r3
     6a8:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
     6aa:	85 b3       	in	r24, 0x15	; 21
     6ac:	82 25       	eor	r24, r2
     6ae:	85 bb       	out	0x15, r24	; 21
					GLCD_Command((Page+Page_inc));	/* Execute command for page change */
     6b0:	69 81       	ldd	r22, Y+1	; 0x01
     6b2:	7a 81       	ldd	r23, Y+2	; 0x02
     6b4:	8b 81       	ldd	r24, Y+3	; 0x03
     6b6:	9c 81       	ldd	r25, Y+4	; 0x04
     6b8:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatunsisf>
     6bc:	2b 2d       	mov	r18, r11
     6be:	3a 2d       	mov	r19, r10
     6c0:	48 2d       	mov	r20, r8
     6c2:	59 2d       	mov	r21, r9
     6c4:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     6c8:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fixunssfsi>
     6cc:	86 2f       	mov	r24, r22
     6ce:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
					Page_inc = Page_inc + 0.5;		/* Increment Page No. by half */
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	5f e3       	ldi	r21, 0x3F	; 63
     6da:	6b 2d       	mov	r22, r11
     6dc:	7a 2d       	mov	r23, r10
     6de:	88 2d       	mov	r24, r8
     6e0:	99 2d       	mov	r25, r9
     6e2:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     6e6:	b6 2e       	mov	r11, r22
     6e8:	a7 2e       	mov	r10, r23
     6ea:	88 2e       	mov	r8, r24
     6ec:	99 2e       	mov	r9, r25
				Y_address++;						/* Increment Y_address count per column */
			}
		}
		else										/* If character is not SPACE or character last column is not zero */
		{
			for(column=0; column<FontWidth; column++)
     6ee:	ff ef       	ldi	r31, 0xFF	; 255
     6f0:	ef 1a       	sub	r14, r31
     6f2:	ff 0a       	sbc	r15, r31
     6f4:	25 e0       	ldi	r18, 0x05	; 5
     6f6:	e2 16       	cp	r14, r18
     6f8:	f1 04       	cpc	r15, r1
     6fa:	09 f0       	breq	.+2      	; 0x6fe <GLCD_Stringright+0x2d0>
     6fc:	ba cf       	rjmp	.-140    	; 0x672 <GLCD_Stringright+0x244>
					GLCD_Command((Page+Page_inc));	/* Execute command for page change */
					Page_inc = Page_inc + 0.5;		/* Increment Page No. by half */
				}
				Y_address++;						/* Increment Y_address count per column */
			}
			GLCD_Data(0);							/* Add one column of zero to print next character next of zero */
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_Data>
			Y_address++;							/* Increment Y_address count for last added zero */
     704:	36 e0       	ldi	r19, 0x06	; 6
     706:	63 0e       	add	r6, r19
     708:	71 1c       	adc	r7, r1
			if((Y_address)%64 == 0)					/* check whether it gets overflowed  from either half of side */
     70a:	c3 01       	movw	r24, r6
     70c:	8f 73       	andi	r24, 0x3F	; 63
     70e:	99 27       	eor	r25, r25
     710:	89 2b       	or	r24, r25
     712:	39 f5       	brne	.+78     	; 0x762 <GLCD_Stringright+0x334>
			{
				Command_Port ^= (1 << CS1);			/* If yes then change segment controller to display on other half of display */
     714:	85 b3       	in	r24, 0x15	; 21
     716:	83 25       	eor	r24, r3
     718:	85 bb       	out	0x15, r24	; 21
				Command_Port ^= (1 << CS2);
     71a:	85 b3       	in	r24, 0x15	; 21
     71c:	82 25       	eor	r24, r2
     71e:	85 bb       	out	0x15, r24	; 21
				GLCD_Command((Page+Page_inc));		/* Execute command for page change */
     720:	69 81       	ldd	r22, Y+1	; 0x01
     722:	7a 81       	ldd	r23, Y+2	; 0x02
     724:	8b 81       	ldd	r24, Y+3	; 0x03
     726:	9c 81       	ldd	r25, Y+4	; 0x04
     728:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatunsisf>
     72c:	9b 01       	movw	r18, r22
     72e:	ac 01       	movw	r20, r24
     730:	6b 2d       	mov	r22, r11
     732:	7a 2d       	mov	r23, r10
     734:	88 2d       	mov	r24, r8
     736:	99 2d       	mov	r25, r9
     738:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     73c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fixunssfsi>
     740:	86 2f       	mov	r24, r22
     742:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
				Page_inc = Page_inc + 0.5;			/* Increment Page No. by half */
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	40 e0       	ldi	r20, 0x00	; 0
     74c:	5f e3       	ldi	r21, 0x3F	; 63
     74e:	6b 2d       	mov	r22, r11
     750:	7a 2d       	mov	r23, r10
     752:	88 2d       	mov	r24, r8
     754:	99 2d       	mov	r25, r9
     756:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     75a:	b6 2e       	mov	r11, r22
     75c:	a7 2e       	mov	r10, r23
     75e:	88 2e       	mov	r8, r24
     760:	99 2e       	mov	r9, r25
	add1=Page;
	Command_Port |= (1 << CS1);						
	Command_Port &= ~(1 << CS2);
	
	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)					/* Print each char in string till null */
     762:	4f ef       	ldi	r20, 0xFF	; 255
     764:	44 1a       	sub	r4, r20
     766:	54 0a       	sbc	r5, r20
     768:	f2 01       	movw	r30, r4
     76a:	90 81       	ld	r25, Z
     76c:	91 11       	cpse	r25, r1
     76e:	be ce       	rjmp	.-644    	; 0x4ec <GLCD_Stringright+0xbe>
				Page_inc = Page_inc + 0.5;			/* Increment Page No. by half */
			}
		}
	}
									
}
     770:	28 96       	adiw	r28, 0x08	; 8
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	df 90       	pop	r13
     78a:	cf 90       	pop	r12
     78c:	bf 90       	pop	r11
     78e:	af 90       	pop	r10
     790:	9f 90       	pop	r9
     792:	8f 90       	pop	r8
     794:	7f 90       	pop	r7
     796:	6f 90       	pop	r6
     798:	5f 90       	pop	r5
     79a:	4f 90       	pop	r4
     79c:	3f 90       	pop	r3
     79e:	2f 90       	pop	r2
     7a0:	08 95       	ret

000007a2 <GLCD_Stringleft>:

void GLCD_Stringleft(int page_no, char str[])			/* GLCD string write function */
{
     7a2:	2f 92       	push	r2
     7a4:	3f 92       	push	r3
     7a6:	4f 92       	push	r4
     7a8:	5f 92       	push	r5
     7aa:	6f 92       	push	r6
     7ac:	7f 92       	push	r7
     7ae:	8f 92       	push	r8
     7b0:	9f 92       	push	r9
     7b2:	af 92       	push	r10
     7b4:	bf 92       	push	r11
     7b6:	cf 92       	push	r12
     7b8:	df 92       	push	r13
     7ba:	ef 92       	push	r14
     7bc:	ff 92       	push	r15
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	28 97       	sbiw	r28, 0x08	; 8
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	cd bf       	out	0x3d, r28	; 61
     7d6:	8c 01       	movw	r16, r24
     7d8:	2b 01       	movw	r4, r22
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
     7da:	7c 01       	movw	r14, r24
     7dc:	28 eb       	ldi	r18, 0xB8	; 184
     7de:	e2 0e       	add	r14, r18
     7e0:	f1 1c       	adc	r15, r1
     7e2:	67 01       	movw	r12, r14
	unsigned int Y_address = 0;
	float Page_inc = 0.5;
	if(add2!=Page){
     7e4:	80 91 98 02 	lds	r24, 0x0298
     7e8:	90 91 99 02 	lds	r25, 0x0299
     7ec:	8e 15       	cp	r24, r14
     7ee:	9f 05       	cpc	r25, r15
     7f0:	19 f0       	breq	.+6      	; 0x7f8 <GLCD_Stringleft+0x56>
		GLCD_Command(0x40);
     7f2:	80 e4       	ldi	r24, 0x40	; 64
     7f4:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
	}
	add2=Page;
     7f8:	f0 92 99 02 	sts	0x0299, r15
     7fc:	e0 92 98 02 	sts	0x0298, r14
	Command_Port |= (1 << CS2);						/* Select first Left half of display */
     800:	ac 9a       	sbi	0x15, 4	; 21
	Command_Port &= ~(1 << CS1);
     802:	ab 98       	cbi	0x15, 3	; 21
	
	GLCD_Command(Page);
     804:	8e 2d       	mov	r24, r14
     806:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
	for(i = 0; str[i] != 0; i++)					/* Print each char in string till null */
     80a:	f2 01       	movw	r30, r4
     80c:	90 81       	ld	r25, Z
     80e:	99 23       	and	r25, r25
     810:	09 f4       	brne	.+2      	; 0x814 <GLCD_Stringleft+0x72>
     812:	68 c1       	rjmp	.+720    	; 0xae4 <__stack+0x285>
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth))) /* Check Whether Total Display get overflowed */
     814:	11 95       	neg	r17
     816:	01 95       	neg	r16
     818:	11 09       	sbc	r17, r1
     81a:	16 95       	lsr	r17
     81c:	10 2f       	mov	r17, r16
     81e:	00 27       	eor	r16, r16
     820:	17 95       	ror	r17
     822:	07 95       	ror	r16
     824:	98 01       	movw	r18, r16
     826:	25 50       	subi	r18, 0x05	; 5
     828:	3c 4f       	sbci	r19, 0xFC	; 252
     82a:	3e 83       	std	Y+6, r19	; 0x06
     82c:	2d 83       	std	Y+5, r18	; 0x05
void GLCD_Stringleft(int page_no, char str[])			/* GLCD string write function */
{
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
	unsigned int Y_address = 0;
	float Page_inc = 0.5;
     82e:	f1 2c       	mov	r15, r1
     830:	e1 2c       	mov	r14, r1
     832:	81 2c       	mov	r8, r1
     834:	0f 2e       	mov	r0, r31
     836:	ff e3       	ldi	r31, 0x3F	; 63
     838:	9f 2e       	mov	r9, r31
     83a:	f0 2d       	mov	r31, r0

void GLCD_Stringleft(int page_no, char str[])			/* GLCD string write function */
{
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
	unsigned int Y_address = 0;
     83c:	61 2c       	mov	r6, r1
     83e:	71 2c       	mov	r7, r1
				{
					if (column == FontWidth)		/* Also check and break if it overflow after 5th column */
					break;
					GLCD_Command(0x40);				/* If not 5th and get overflowed then change Y address to START column */
					Y_address = Y_address + column;	/* Increment Y address count by column no. */
					Command_Port ^= (1 << CS1);		/* If yes then change segment controller to display on other half of display */
     840:	68 94       	set
     842:	33 24       	eor	r3, r3
     844:	33 f8       	bld	r3, 3
					Command_Port ^= (1 << CS2);
     846:	68 94       	set
     848:	22 24       	eor	r2, r2
     84a:	24 f8       	bld	r2, 4
					GLCD_Command(Page + Page_inc);	/* Execute command for page change */
     84c:	96 01       	movw	r18, r12
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	29 83       	std	Y+1, r18	; 0x01
     854:	3a 83       	std	Y+2, r19	; 0x02
     856:	4b 83       	std	Y+3, r20	; 0x03
     858:	5c 83       	std	Y+4, r21	; 0x04
     85a:	bf 2c       	mov	r11, r15
     85c:	ae 2c       	mov	r10, r14
     85e:	06 c0       	rjmp	.+12     	; 0x86c <__stack+0xd>
	Command_Port &= ~(1 << CS1);
	
	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)					/* Print each char in string till null */
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth))) /* Check Whether Total Display get overflowed */
     860:	4d 81       	ldd	r20, Y+5	; 0x05
     862:	5e 81       	ldd	r21, Y+6	; 0x06
     864:	46 15       	cp	r20, r6
     866:	57 05       	cpc	r21, r7
     868:	08 f4       	brcc	.+2      	; 0x86c <__stack+0xd>
     86a:	3c c1       	rjmp	.+632    	; 0xae4 <__stack+0x285>
		break;										/* If yes then break writing */
		if (str[i]!=32)								/* Check whether character is not a SPACE */
     86c:	90 32       	cpi	r25, 0x20	; 32
     86e:	09 f4       	brne	.+2      	; 0x872 <__stack+0x13>
     870:	45 c0       	rjmp	.+138    	; 0x8fc <__stack+0x9d>
     872:	01 e0       	ldi	r16, 0x01	; 1
     874:	10 e0       	ldi	r17, 0x00	; 0
		{
			for (column=1; column<=FontWidth; column++)
			{
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))	/* If yes then check whether it overflow from right side of display */
     876:	63 01       	movw	r12, r6
     878:	c0 0e       	add	r12, r16
     87a:	d1 1e       	adc	r13, r17
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e0       	ldi	r20, 0x00	; 0
     882:	5f e3       	ldi	r21, 0x3F	; 63
     884:	6b 2d       	mov	r22, r11
     886:	7a 2d       	mov	r23, r10
     888:	88 2d       	mov	r24, r8
     88a:	99 2d       	mov	r25, r9
     88c:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     890:	e6 2e       	mov	r14, r22
     892:	f7 2e       	mov	r15, r23
     894:	88 87       	std	Y+8, r24	; 0x08
     896:	9f 83       	std	Y+7, r25	; 0x07
     898:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__fixsfsi>
     89c:	76 95       	lsr	r23
     89e:	76 2f       	mov	r23, r22
     8a0:	66 27       	eor	r22, r22
     8a2:	77 95       	ror	r23
     8a4:	67 95       	ror	r22
     8a6:	c6 16       	cp	r12, r22
     8a8:	d7 06       	cpc	r13, r23
     8aa:	11 f5       	brne	.+68     	; 0x8f0 <__stack+0x91>
				{
					if (column == FontWidth)		/* Also check and break if it overflow after 5th column */
     8ac:	05 30       	cpi	r16, 0x05	; 5
     8ae:	11 05       	cpc	r17, r1
     8b0:	29 f1       	breq	.+74     	; 0x8fc <__stack+0x9d>
					break;
					GLCD_Command(0x40);				/* If not 5th and get overflowed then change Y address to START column */
     8b2:	80 e4       	ldi	r24, 0x40	; 64
     8b4:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
					Y_address = Y_address + column;	/* Increment Y address count by column no. */
					Command_Port ^= (1 << CS1);		/* If yes then change segment controller to display on other half of display */
     8b8:	85 b3       	in	r24, 0x15	; 21
     8ba:	83 25       	eor	r24, r3
     8bc:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
     8be:	85 b3       	in	r24, 0x15	; 21
     8c0:	82 25       	eor	r24, r2
     8c2:	85 bb       	out	0x15, r24	; 21
					GLCD_Command(Page + Page_inc);	/* Execute command for page change */
     8c4:	69 81       	ldd	r22, Y+1	; 0x01
     8c6:	7a 81       	ldd	r23, Y+2	; 0x02
     8c8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ca:	9c 81       	ldd	r25, Y+4	; 0x04
     8cc:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatunsisf>
     8d0:	2b 2d       	mov	r18, r11
     8d2:	3a 2d       	mov	r19, r10
     8d4:	48 2d       	mov	r20, r8
     8d6:	59 2d       	mov	r21, r9
     8d8:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     8dc:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fixunssfsi>
     8e0:	86 2f       	mov	r24, r22
     8e2:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
					Page_inc = Page_inc + 0.5;		/* Increment Page No. by half */
     8e6:	be 2c       	mov	r11, r14
     8e8:	af 2c       	mov	r10, r15
     8ea:	88 84       	ldd	r8, Y+8	; 0x08
     8ec:	9f 80       	ldd	r9, Y+7	; 0x07
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))	/* If yes then check whether it overflow from right side of display */
				{
					if (column == FontWidth)		/* Also check and break if it overflow after 5th column */
					break;
					GLCD_Command(0x40);				/* If not 5th and get overflowed then change Y address to START column */
					Y_address = Y_address + column;	/* Increment Y address count by column no. */
     8ee:	36 01       	movw	r6, r12
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth))) /* Check Whether Total Display get overflowed */
		break;										/* If yes then break writing */
		if (str[i]!=32)								/* Check whether character is not a SPACE */
		{
			for (column=1; column<=FontWidth; column++)
     8f0:	0f 5f       	subi	r16, 0xFF	; 255
     8f2:	1f 4f       	sbci	r17, 0xFF	; 255
     8f4:	06 30       	cpi	r16, 0x06	; 6
     8f6:	11 05       	cpc	r17, r1
     8f8:	09 f0       	breq	.+2      	; 0x8fc <__stack+0x9d>
     8fa:	bd cf       	rjmp	.-134    	; 0x876 <__stack+0x17>
					GLCD_Command(Page + Page_inc);	/* Execute command for page change */
					Page_inc = Page_inc + 0.5;		/* Increment Page No. by half */
				}
			}
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))   /* Check Whether Total Display get overflowed */
     8fc:	8d 81       	ldd	r24, Y+5	; 0x05
     8fe:	9e 81       	ldd	r25, Y+6	; 0x06
     900:	86 15       	cp	r24, r6
     902:	97 05       	cpc	r25, r7
     904:	08 f4       	brcc	.+2      	; 0x908 <__stack+0xa9>
     906:	ee c0       	rjmp	.+476    	; 0xae4 <__stack+0x285>
		break;										/* If yes then break writing */
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)/* Check whether character is SPACE or character last column is zero */
     908:	f2 01       	movw	r30, r4
     90a:	20 81       	ld	r18, Z
     90c:	82 2f       	mov	r24, r18
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	80 97       	sbiw	r24, 0x20	; 32
     912:	ac 01       	movw	r20, r24
     914:	44 0f       	add	r20, r20
     916:	55 1f       	adc	r21, r21
     918:	44 0f       	add	r20, r20
     91a:	55 1f       	adc	r21, r21
     91c:	84 0f       	add	r24, r20
     91e:	95 1f       	adc	r25, r21
     920:	04 96       	adiw	r24, 0x04	; 4
     922:	ac 01       	movw	r20, r24
     924:	44 0f       	add	r20, r20
     926:	55 1f       	adc	r21, r21
     928:	44 0f       	add	r20, r20
     92a:	55 1f       	adc	r21, r21
     92c:	84 0f       	add	r24, r20
     92e:	95 1f       	adc	r25, r21
     930:	80 5a       	subi	r24, 0xA0	; 160
     932:	9f 4f       	sbci	r25, 0xFF	; 255
     934:	89 2b       	or	r24, r25
     936:	39 f0       	breq	.+14     	; 0x946 <__stack+0xe7>
     938:	20 32       	cpi	r18, 0x20	; 32
     93a:	09 f0       	breq	.+2      	; 0x93e <__stack+0xdf>
     93c:	51 c0       	rjmp	.+162    	; 0x9e0 <__stack+0x181>
     93e:	83 01       	movw	r16, r6
     940:	e1 2c       	mov	r14, r1
     942:	f1 2c       	mov	r15, r1
     944:	03 c0       	rjmp	.+6      	; 0x94c <__stack+0xed>
     946:	83 01       	movw	r16, r6
     948:	e1 2c       	mov	r14, r1
     94a:	f1 2c       	mov	r15, r1
		{
			for(column=0; column<FontWidth; column++)
			{
				GLCD_Data(font[str[i]-32][column]);	/* If yes then then print character */
     94c:	f2 01       	movw	r30, r4
     94e:	80 81       	ld	r24, Z
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	80 97       	sbiw	r24, 0x20	; 32
     954:	fc 01       	movw	r30, r24
     956:	ee 0f       	add	r30, r30
     958:	ff 1f       	adc	r31, r31
     95a:	ee 0f       	add	r30, r30
     95c:	ff 1f       	adc	r31, r31
     95e:	e8 0f       	add	r30, r24
     960:	f9 1f       	adc	r31, r25
     962:	ee 0d       	add	r30, r14
     964:	ff 1d       	adc	r31, r15
     966:	e0 5a       	subi	r30, 0xA0	; 160
     968:	ff 4f       	sbci	r31, 0xFF	; 255
     96a:	80 81       	ld	r24, Z
     96c:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_Data>
				if((Y_address+1)%64==0)				/* check whether it gets overflowed  from either half of side */
     970:	0f 5f       	subi	r16, 0xFF	; 255
     972:	1f 4f       	sbci	r17, 0xFF	; 255
     974:	c8 01       	movw	r24, r16
     976:	8f 73       	andi	r24, 0x3F	; 63
     978:	99 27       	eor	r25, r25
     97a:	89 2b       	or	r24, r25
     97c:	29 f5       	brne	.+74     	; 0x9c8 <__stack+0x169>
				{
					Command_Port ^= (1 << CS1);		/* If yes then change segment controller to display on other half of display */
     97e:	85 b3       	in	r24, 0x15	; 21
     980:	83 25       	eor	r24, r3
     982:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
     984:	85 b3       	in	r24, 0x15	; 21
     986:	82 25       	eor	r24, r2
     988:	85 bb       	out	0x15, r24	; 21
					GLCD_Command((Page+Page_inc));	/* Execute command for page change */
     98a:	69 81       	ldd	r22, Y+1	; 0x01
     98c:	7a 81       	ldd	r23, Y+2	; 0x02
     98e:	8b 81       	ldd	r24, Y+3	; 0x03
     990:	9c 81       	ldd	r25, Y+4	; 0x04
     992:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatunsisf>
     996:	2b 2d       	mov	r18, r11
     998:	3a 2d       	mov	r19, r10
     99a:	48 2d       	mov	r20, r8
     99c:	59 2d       	mov	r21, r9
     99e:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     9a2:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fixunssfsi>
     9a6:	86 2f       	mov	r24, r22
     9a8:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
					Page_inc = Page_inc + 0.5;		/* Increment Page No. by half */
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	5f e3       	ldi	r21, 0x3F	; 63
     9b4:	6b 2d       	mov	r22, r11
     9b6:	7a 2d       	mov	r23, r10
     9b8:	88 2d       	mov	r24, r8
     9ba:	99 2d       	mov	r25, r9
     9bc:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     9c0:	b6 2e       	mov	r11, r22
     9c2:	a7 2e       	mov	r10, r23
     9c4:	88 2e       	mov	r8, r24
     9c6:	99 2e       	mov	r9, r25
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))   /* Check Whether Total Display get overflowed */
		break;										/* If yes then break writing */
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)/* Check whether character is SPACE or character last column is zero */
		{
			for(column=0; column<FontWidth; column++)
     9c8:	ff ef       	ldi	r31, 0xFF	; 255
     9ca:	ef 1a       	sub	r14, r31
     9cc:	ff 0a       	sbc	r15, r31
     9ce:	25 e0       	ldi	r18, 0x05	; 5
     9d0:	e2 16       	cp	r14, r18
     9d2:	f1 04       	cpc	r15, r1
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <__stack+0x179>
     9d6:	ba cf       	rjmp	.-140    	; 0x94c <__stack+0xed>
     9d8:	35 e0       	ldi	r19, 0x05	; 5
     9da:	63 0e       	add	r6, r19
     9dc:	71 1c       	adc	r7, r1
     9de:	7b c0       	rjmp	.+246    	; 0xad6 <__stack+0x277>
     9e0:	83 01       	movw	r16, r6
     9e2:	e1 2c       	mov	r14, r1
     9e4:	f1 2c       	mov	r15, r1
		}
		else										/* If character is not SPACE or character last column is not zero */
		{
			for(column=0; column<FontWidth; column++)
			{
				GLCD_Data(font[str[i]-32][column]); /* Then continue to print hat char */
     9e6:	f2 01       	movw	r30, r4
     9e8:	80 81       	ld	r24, Z
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	80 97       	sbiw	r24, 0x20	; 32
     9ee:	fc 01       	movw	r30, r24
     9f0:	ee 0f       	add	r30, r30
     9f2:	ff 1f       	adc	r31, r31
     9f4:	ee 0f       	add	r30, r30
     9f6:	ff 1f       	adc	r31, r31
     9f8:	e8 0f       	add	r30, r24
     9fa:	f9 1f       	adc	r31, r25
     9fc:	ee 0d       	add	r30, r14
     9fe:	ff 1d       	adc	r31, r15
     a00:	e0 5a       	subi	r30, 0xA0	; 160
     a02:	ff 4f       	sbci	r31, 0xFF	; 255
     a04:	80 81       	ld	r24, Z
     a06:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_Data>
				if((Y_address+1)%64==0)				/* check whether it gets overflowed  from either half of side */
     a0a:	0f 5f       	subi	r16, 0xFF	; 255
     a0c:	1f 4f       	sbci	r17, 0xFF	; 255
     a0e:	c8 01       	movw	r24, r16
     a10:	8f 73       	andi	r24, 0x3F	; 63
     a12:	99 27       	eor	r25, r25
     a14:	89 2b       	or	r24, r25
     a16:	29 f5       	brne	.+74     	; 0xa62 <__stack+0x203>
				{
					Command_Port ^= (1 << CS1);		/* If yes then change segment controller to display on other half of display */
     a18:	85 b3       	in	r24, 0x15	; 21
     a1a:	83 25       	eor	r24, r3
     a1c:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
     a1e:	85 b3       	in	r24, 0x15	; 21
     a20:	82 25       	eor	r24, r2
     a22:	85 bb       	out	0x15, r24	; 21
					GLCD_Command((Page+Page_inc));	/* Execute command for page change */
     a24:	69 81       	ldd	r22, Y+1	; 0x01
     a26:	7a 81       	ldd	r23, Y+2	; 0x02
     a28:	8b 81       	ldd	r24, Y+3	; 0x03
     a2a:	9c 81       	ldd	r25, Y+4	; 0x04
     a2c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatunsisf>
     a30:	2b 2d       	mov	r18, r11
     a32:	3a 2d       	mov	r19, r10
     a34:	48 2d       	mov	r20, r8
     a36:	59 2d       	mov	r21, r9
     a38:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     a3c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fixunssfsi>
     a40:	86 2f       	mov	r24, r22
     a42:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
					Page_inc = Page_inc + 0.5;		/* Increment Page No. by half */
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	5f e3       	ldi	r21, 0x3F	; 63
     a4e:	6b 2d       	mov	r22, r11
     a50:	7a 2d       	mov	r23, r10
     a52:	88 2d       	mov	r24, r8
     a54:	99 2d       	mov	r25, r9
     a56:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     a5a:	b6 2e       	mov	r11, r22
     a5c:	a7 2e       	mov	r10, r23
     a5e:	88 2e       	mov	r8, r24
     a60:	99 2e       	mov	r9, r25
				Y_address++;						/* Increment Y_address count per column */
			}
		}
		else										/* If character is not SPACE or character last column is not zero */
		{
			for(column=0; column<FontWidth; column++)
     a62:	ff ef       	ldi	r31, 0xFF	; 255
     a64:	ef 1a       	sub	r14, r31
     a66:	ff 0a       	sbc	r15, r31
     a68:	25 e0       	ldi	r18, 0x05	; 5
     a6a:	e2 16       	cp	r14, r18
     a6c:	f1 04       	cpc	r15, r1
     a6e:	09 f0       	breq	.+2      	; 0xa72 <__stack+0x213>
     a70:	ba cf       	rjmp	.-140    	; 0x9e6 <__stack+0x187>
					GLCD_Command((Page+Page_inc));	/* Execute command for page change */
					Page_inc = Page_inc + 0.5;		/* Increment Page No. by half */
				}
				Y_address++;						/* Increment Y_address count per column */
			}
			GLCD_Data(0);							/* Add one column of zero to print next character next of zero */
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_Data>
			Y_address++;							/* Increment Y_address count for last added zero */
     a78:	36 e0       	ldi	r19, 0x06	; 6
     a7a:	63 0e       	add	r6, r19
     a7c:	71 1c       	adc	r7, r1
			if((Y_address)%64 == 0)					/* check whether it gets overflowed  from either half of side */
     a7e:	c3 01       	movw	r24, r6
     a80:	8f 73       	andi	r24, 0x3F	; 63
     a82:	99 27       	eor	r25, r25
     a84:	89 2b       	or	r24, r25
     a86:	39 f5       	brne	.+78     	; 0xad6 <__stack+0x277>
			{
				Command_Port ^= (1 << CS1);			/* If yes then change segment controller to display on other half of display */
     a88:	85 b3       	in	r24, 0x15	; 21
     a8a:	83 25       	eor	r24, r3
     a8c:	85 bb       	out	0x15, r24	; 21
				Command_Port ^= (1 << CS2);
     a8e:	85 b3       	in	r24, 0x15	; 21
     a90:	82 25       	eor	r24, r2
     a92:	85 bb       	out	0x15, r24	; 21
				GLCD_Command((Page+Page_inc));		/* Execute command for page change */
     a94:	69 81       	ldd	r22, Y+1	; 0x01
     a96:	7a 81       	ldd	r23, Y+2	; 0x02
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	9c 81       	ldd	r25, Y+4	; 0x04
     a9c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatunsisf>
     aa0:	9b 01       	movw	r18, r22
     aa2:	ac 01       	movw	r20, r24
     aa4:	6b 2d       	mov	r22, r11
     aa6:	7a 2d       	mov	r23, r10
     aa8:	88 2d       	mov	r24, r8
     aaa:	99 2d       	mov	r25, r9
     aac:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     ab0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fixunssfsi>
     ab4:	86 2f       	mov	r24, r22
     ab6:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
				Page_inc = Page_inc + 0.5;			/* Increment Page No. by half */
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	5f e3       	ldi	r21, 0x3F	; 63
     ac2:	6b 2d       	mov	r22, r11
     ac4:	7a 2d       	mov	r23, r10
     ac6:	88 2d       	mov	r24, r8
     ac8:	99 2d       	mov	r25, r9
     aca:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     ace:	b6 2e       	mov	r11, r22
     ad0:	a7 2e       	mov	r10, r23
     ad2:	88 2e       	mov	r8, r24
     ad4:	99 2e       	mov	r9, r25
	add2=Page;
	Command_Port |= (1 << CS2);						/* Select first Left half of display */
	Command_Port &= ~(1 << CS1);
	
	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)					/* Print each char in string till null */
     ad6:	4f ef       	ldi	r20, 0xFF	; 255
     ad8:	44 1a       	sub	r4, r20
     ada:	54 0a       	sbc	r5, r20
     adc:	f2 01       	movw	r30, r4
     ade:	90 81       	ld	r25, Z
     ae0:	91 11       	cpse	r25, r1
     ae2:	be ce       	rjmp	.-644    	; 0x860 <__stack+0x1>
				Page_inc = Page_inc + 0.5;			/* Increment Page No. by half */
			}
		}
	}
									/* Set Y address (column=0) */
}
     ae4:	28 96       	adiw	r28, 0x08	; 8
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	df 90       	pop	r13
     afe:	cf 90       	pop	r12
     b00:	bf 90       	pop	r11
     b02:	af 90       	pop	r10
     b04:	9f 90       	pop	r9
     b06:	8f 90       	pop	r8
     b08:	7f 90       	pop	r7
     b0a:	6f 90       	pop	r6
     b0c:	5f 90       	pop	r5
     b0e:	4f 90       	pop	r4
     b10:	3f 90       	pop	r3
     b12:	2f 90       	pop	r2
     b14:	08 95       	ret

00000b16 <GLCD_String_send>:
	GLCD_Command(0x40);				/* Set Y address (column=0) */
	GLCD_Command(0xB8);				/* Set x address (page=0) */
}

void GLCD_String_send(int page_no, char str[])			/* GLCD string write function */
{  
     b16:	6f 92       	push	r6
     b18:	7f 92       	push	r7
     b1a:	8f 92       	push	r8
     b1c:	9f 92       	push	r9
     b1e:	af 92       	push	r10
     b20:	bf 92       	push	r11
     b22:	cf 92       	push	r12
     b24:	df 92       	push	r13
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	8b 01       	movw	r16, r22
		unsigned int i;
		unsigned int Page = ((0xB8) + page_no);
     b34:	ec 01       	movw	r28, r24
     b36:	c8 54       	subi	r28, 0x48	; 72
     b38:	df 4f       	sbci	r29, 0xFF	; 255
     b3a:	6e 01       	movw	r12, r28
		static int num1=0;
		float Page_inc = 0.5;
		if(add3!=Page){
     b3c:	80 91 96 02 	lds	r24, 0x0296
     b40:	90 91 97 02 	lds	r25, 0x0297
     b44:	8c 17       	cp	r24, r28
     b46:	9d 07       	cpc	r25, r29
     b48:	19 f0       	breq	.+6      	; 0xb50 <GLCD_String_send+0x3a>
			GLCD_Command(0x40);
     b4a:	80 e4       	ldi	r24, 0x40	; 64
     b4c:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
		}
		add3=Page;
     b50:	d0 93 97 02 	sts	0x0297, r29
     b54:	c0 93 96 02 	sts	0x0296, r28
		Command_Port |= (1 << CS2);						/* Select first Left half of display */
     b58:	ac 9a       	sbi	0x15, 4	; 21
		Command_Port &= ~(1 << CS1);
     b5a:	ab 98       	cbi	0x15, 3	; 21
		GLCD_Command(Page);
     b5c:	8c 2f       	mov	r24, r28
     b5e:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
		if(num1==0){GLCD_Command(0x40);}
     b62:	80 91 94 02 	lds	r24, 0x0294
     b66:	90 91 95 02 	lds	r25, 0x0295
     b6a:	89 2b       	or	r24, r25
     b6c:	09 f0       	breq	.+2      	; 0xb70 <GLCD_String_send+0x5a>
     b6e:	3f c0       	rjmp	.+126    	; 0xbee <GLCD_String_send+0xd8>
     b70:	80 e4       	ldi	r24, 0x40	; 64
     b72:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
     b76:	3b c0       	rjmp	.+118    	; 0xbee <GLCD_String_send+0xd8>
			
		for(i = 0; i<5; i++)					/* Print each char in string till null */
		{
			
			if(num1%128==1){
     b78:	80 91 94 02 	lds	r24, 0x0294
     b7c:	90 91 95 02 	lds	r25, 0x0295
     b80:	8f 77       	andi	r24, 0x7F	; 127
     b82:	90 78       	andi	r25, 0x80	; 128
     b84:	99 23       	and	r25, r25
     b86:	24 f4       	brge	.+8      	; 0xb90 <GLCD_String_send+0x7a>
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	80 68       	ori	r24, 0x80	; 128
     b8c:	9f 6f       	ori	r25, 0xFF	; 255
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	e9 f4       	brne	.+58     	; 0xbce <GLCD_String_send+0xb8>
				Command_Port ^= (1 << CS1);	/* If yes then change segment controller */
     b94:	85 b3       	in	r24, 0x15	; 21
     b96:	86 25       	eor	r24, r6
     b98:	85 bb       	out	0x15, r24	; 21
				Command_Port ^= (1 << CS2);
     b9a:	85 b3       	in	r24, 0x15	; 21
     b9c:	87 25       	eor	r24, r7
     b9e:	85 bb       	out	0x15, r24	; 21
				GLCD_Command(Page+Page_inc);/* Increment page address */
     ba0:	c7 01       	movw	r24, r14
     ba2:	b6 01       	movw	r22, r12
     ba4:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatunsisf>
     ba8:	a5 01       	movw	r20, r10
     baa:	94 01       	movw	r18, r8
     bac:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     bb0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fixunssfsi>
     bb4:	86 2f       	mov	r24, r22
     bb6:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
				Page_inc=Page_inc+0.5;
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	c5 01       	movw	r24, r10
     bc4:	b4 01       	movw	r22, r8
     bc6:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     bca:	4b 01       	movw	r8, r22
     bcc:	5c 01       	movw	r10, r24
			}
			num1++;
     bce:	80 91 94 02 	lds	r24, 0x0294
     bd2:	90 91 95 02 	lds	r25, 0x0295
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	90 93 95 02 	sts	0x0295, r25
     bdc:	80 93 94 02 	sts	0x0294, r24
			GLCD_Data(str[i]);
     be0:	89 91       	ld	r24, Y+
     be2:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_Data>
		Command_Port |= (1 << CS2);						/* Select first Left half of display */
		Command_Port &= ~(1 << CS1);
		GLCD_Command(Page);
		if(num1==0){GLCD_Command(0x40);}
			
		for(i = 0; i<5; i++)					/* Print each char in string till null */
     be6:	c0 17       	cp	r28, r16
     be8:	d1 07       	cpc	r29, r17
     bea:	31 f6       	brne	.-116    	; 0xb78 <GLCD_String_send+0x62>
     bec:	13 c0       	rjmp	.+38     	; 0xc14 <GLCD_String_send+0xfe>
     bee:	e8 01       	movw	r28, r16
     bf0:	0b 5f       	subi	r16, 0xFB	; 251
     bf2:	1f 4f       	sbci	r17, 0xFF	; 255
	GLCD_Command(0x40);				/* Set Y address (column=0) */
	GLCD_Command(0xB8);				/* Set x address (page=0) */
}

void GLCD_String_send(int page_no, char str[])			/* GLCD string write function */
{  
     bf4:	0f 2e       	mov	r0, r31
     bf6:	81 2c       	mov	r8, r1
     bf8:	91 2c       	mov	r9, r1
     bfa:	a1 2c       	mov	r10, r1
     bfc:	ff e3       	ldi	r31, 0x3F	; 63
     bfe:	bf 2e       	mov	r11, r31
     c00:	f0 2d       	mov	r31, r0
			
		for(i = 0; i<5; i++)					/* Print each char in string till null */
		{
			
			if(num1%128==1){
				Command_Port ^= (1 << CS1);	/* If yes then change segment controller */
     c02:	68 94       	set
     c04:	66 24       	eor	r6, r6
     c06:	63 f8       	bld	r6, 3
				Command_Port ^= (1 << CS2);
     c08:	68 94       	set
     c0a:	77 24       	eor	r7, r7
     c0c:	74 f8       	bld	r7, 4
				GLCD_Command(Page+Page_inc);/* Increment page address */
     c0e:	e1 2c       	mov	r14, r1
     c10:	f1 2c       	mov	r15, r1
     c12:	b2 cf       	rjmp	.-156    	; 0xb78 <GLCD_String_send+0x62>
				Page_inc=Page_inc+0.5;
			}
			num1++;
			GLCD_Data(str[i]);
		}
}
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	ef 90       	pop	r14
     c20:	df 90       	pop	r13
     c22:	cf 90       	pop	r12
     c24:	bf 90       	pop	r11
     c26:	af 90       	pop	r10
     c28:	9f 90       	pop	r9
     c2a:	8f 90       	pop	r8
     c2c:	7f 90       	pop	r7
     c2e:	6f 90       	pop	r6
     c30:	08 95       	ret

00000c32 <GLCD_String_send2>:
void GLCD_String_send2(char page_no, char str[])			/* GLCD string write function */
{
     c32:	6f 92       	push	r6
     c34:	7f 92       	push	r7
     c36:	8f 92       	push	r8
     c38:	9f 92       	push	r9
     c3a:	af 92       	push	r10
     c3c:	bf 92       	push	r11
     c3e:	cf 92       	push	r12
     c40:	df 92       	push	r13
     c42:	ef 92       	push	r14
     c44:	ff 92       	push	r15
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	8b 01       	movw	r16, r22
	unsigned int i;
	unsigned int Page = ((0xB8) + page_no);
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	88 54       	subi	r24, 0x48	; 72
     c54:	9f 4f       	sbci	r25, 0xFF	; 255
     c56:	6c 01       	movw	r12, r24
	static int num=0;
	float Page_inc = 0.5;
	
	Command_Port |= (1 << CS1);						
     c58:	ab 9a       	sbi	0x15, 3	; 21
	Command_Port &= ~(1 << CS2);
     c5a:	ac 98       	cbi	0x15, 4	; 21
	GLCD_Command(Page);
     c5c:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
	if(num==0){GLCD_Command(0x40);}
     c60:	80 91 92 02 	lds	r24, 0x0292
     c64:	90 91 93 02 	lds	r25, 0x0293
     c68:	89 2b       	or	r24, r25
     c6a:	09 f0       	breq	.+2      	; 0xc6e <GLCD_String_send2+0x3c>
     c6c:	3f c0       	rjmp	.+126    	; 0xcec <GLCD_String_send2+0xba>
     c6e:	80 e4       	ldi	r24, 0x40	; 64
     c70:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
     c74:	3b c0       	rjmp	.+118    	; 0xcec <GLCD_String_send2+0xba>
	
	for(i = 0; i<5; i++)					/* Print each char in string till null */
	{
		
		if(num%128==1){
     c76:	80 91 92 02 	lds	r24, 0x0292
     c7a:	90 91 93 02 	lds	r25, 0x0293
     c7e:	8f 77       	andi	r24, 0x7F	; 127
     c80:	90 78       	andi	r25, 0x80	; 128
     c82:	99 23       	and	r25, r25
     c84:	24 f4       	brge	.+8      	; 0xc8e <GLCD_String_send2+0x5c>
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	80 68       	ori	r24, 0x80	; 128
     c8a:	9f 6f       	ori	r25, 0xFF	; 255
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	e9 f4       	brne	.+58     	; 0xccc <GLCD_String_send2+0x9a>
			Command_Port ^= (1 << CS1);	/* If yes then change segment controller */
     c92:	85 b3       	in	r24, 0x15	; 21
     c94:	86 25       	eor	r24, r6
     c96:	85 bb       	out	0x15, r24	; 21
			Command_Port ^= (1 << CS2);
     c98:	85 b3       	in	r24, 0x15	; 21
     c9a:	87 25       	eor	r24, r7
     c9c:	85 bb       	out	0x15, r24	; 21
			GLCD_Command(Page+Page_inc);/* Increment page address */
     c9e:	c7 01       	movw	r24, r14
     ca0:	b6 01       	movw	r22, r12
     ca2:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatunsisf>
     ca6:	a5 01       	movw	r20, r10
     ca8:	94 01       	movw	r18, r8
     caa:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     cae:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fixunssfsi>
     cb2:	86 2f       	mov	r24, r22
     cb4:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
			Page_inc=Page_inc+0.5;
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	5f e3       	ldi	r21, 0x3F	; 63
     cc0:	c5 01       	movw	r24, r10
     cc2:	b4 01       	movw	r22, r8
     cc4:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     cc8:	4b 01       	movw	r8, r22
     cca:	5c 01       	movw	r10, r24
		}
		num++;
     ccc:	80 91 92 02 	lds	r24, 0x0292
     cd0:	90 91 93 02 	lds	r25, 0x0293
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	90 93 93 02 	sts	0x0293, r25
     cda:	80 93 92 02 	sts	0x0292, r24
		GLCD_Data(str[i]);
     cde:	89 91       	ld	r24, Y+
     ce0:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_Data>
	Command_Port |= (1 << CS1);						
	Command_Port &= ~(1 << CS2);
	GLCD_Command(Page);
	if(num==0){GLCD_Command(0x40);}
	
	for(i = 0; i<5; i++)					/* Print each char in string till null */
     ce4:	c0 17       	cp	r28, r16
     ce6:	d1 07       	cpc	r29, r17
     ce8:	31 f6       	brne	.-116    	; 0xc76 <GLCD_String_send2+0x44>
     cea:	13 c0       	rjmp	.+38     	; 0xd12 <GLCD_String_send2+0xe0>
     cec:	e8 01       	movw	r28, r16
     cee:	0b 5f       	subi	r16, 0xFB	; 251
     cf0:	1f 4f       	sbci	r17, 0xFF	; 255
			num1++;
			GLCD_Data(str[i]);
		}
}
void GLCD_String_send2(char page_no, char str[])			/* GLCD string write function */
{
     cf2:	0f 2e       	mov	r0, r31
     cf4:	81 2c       	mov	r8, r1
     cf6:	91 2c       	mov	r9, r1
     cf8:	a1 2c       	mov	r10, r1
     cfa:	ff e3       	ldi	r31, 0x3F	; 63
     cfc:	bf 2e       	mov	r11, r31
     cfe:	f0 2d       	mov	r31, r0
	
	for(i = 0; i<5; i++)					/* Print each char in string till null */
	{
		
		if(num%128==1){
			Command_Port ^= (1 << CS1);	/* If yes then change segment controller */
     d00:	68 94       	set
     d02:	66 24       	eor	r6, r6
     d04:	63 f8       	bld	r6, 3
			Command_Port ^= (1 << CS2);
     d06:	68 94       	set
     d08:	77 24       	eor	r7, r7
     d0a:	74 f8       	bld	r7, 4
			GLCD_Command(Page+Page_inc);/* Increment page address */
     d0c:	e1 2c       	mov	r14, r1
     d0e:	f1 2c       	mov	r15, r1
     d10:	b2 cf       	rjmp	.-156    	; 0xc76 <GLCD_String_send2+0x44>
			Page_inc=Page_inc+0.5;
		}
		num++;
		GLCD_Data(str[i]);
	}
}
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
     d22:	bf 90       	pop	r11
     d24:	af 90       	pop	r10
     d26:	9f 90       	pop	r9
     d28:	8f 90       	pop	r8
     d2a:	7f 90       	pop	r7
     d2c:	6f 90       	pop	r6
     d2e:	08 95       	ret

00000d30 <GLCD_white_screen>:
void GLCD_white_screen()	/* GLCD string write function */
{
     d30:	af 92       	push	r10
     d32:	bf 92       	push	r11
     d34:	cf 92       	push	r12
     d36:	df 92       	push	r13
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
	int column,page,page_add=0xB8,k=0;
	float page_inc=0.5;
	

	Command_Port |= (1 << CS2);		/* Select first Left half of display */
     d44:	ac 9a       	sbi	0x15, 4	; 21
	Command_Port &= ~(1 << CS1);
     d46:	ab 98       	cbi	0x15, 3	; 21
	GLCD_Command((page_add));
     d48:	88 eb       	ldi	r24, 0xB8	; 184
     d4a:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
     d4e:	00 e1       	ldi	r16, 0x10	; 16
     d50:	10 e0       	ldi	r17, 0x00	; 0
	}
}
void GLCD_white_screen()	/* GLCD string write function */
{
	int column,page,page_add=0xB8,k=0;
	float page_inc=0.5;
     d52:	0f 2e       	mov	r0, r31
     d54:	c1 2c       	mov	r12, r1
     d56:	d1 2c       	mov	r13, r1
     d58:	e1 2c       	mov	r14, r1
     d5a:	ff e3       	ldi	r31, 0x3F	; 63
     d5c:	ff 2e       	mov	r15, r31
     d5e:	f0 2d       	mov	r31, r0
		for(column=0;column<64;column++)
		{
			
			GLCD_Data(0x00);		/* Print 64 column of each page */
		}
		Command_Port ^= (1 << CS1);	/* If yes then change segment controller */
     d60:	68 94       	set
     d62:	aa 24       	eor	r10, r10
     d64:	a3 f8       	bld	r10, 3
		Command_Port ^= (1 << CS2);
     d66:	68 94       	set
     d68:	bb 24       	eor	r11, r11
     d6a:	b4 f8       	bld	r11, 4
     d6c:	25 c0       	rjmp	.+74     	; 0xdb8 <GLCD_white_screen+0x88>
	for(page=0;page<16;page++)		/* Print 16 pages i.e. 8 page of each half of display */
	{
		for(column=0;column<64;column++)
		{
			
			GLCD_Data(0x00);		/* Print 64 column of each page */
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_Data>
     d74:	21 97       	sbiw	r28, 0x01	; 1
	Command_Port &= ~(1 << CS1);
	GLCD_Command((page_add));
	//GLCD_Command(0x40);
	for(page=0;page<16;page++)		/* Print 16 pages i.e. 8 page of each half of display */
	{
		for(column=0;column<64;column++)
     d76:	d9 f7       	brne	.-10     	; 0xd6e <GLCD_white_screen+0x3e>
		{
			
			GLCD_Data(0x00);		/* Print 64 column of each page */
		}
		Command_Port ^= (1 << CS1);	/* If yes then change segment controller */
     d78:	85 b3       	in	r24, 0x15	; 21
     d7a:	8a 25       	eor	r24, r10
     d7c:	85 bb       	out	0x15, r24	; 21
		Command_Port ^= (1 << CS2);
     d7e:	85 b3       	in	r24, 0x15	; 21
     d80:	8b 25       	eor	r24, r11
     d82:	85 bb       	out	0x15, r24	; 21
		GLCD_Command((page_add+page_inc));/* Increment page address */
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	48 e3       	ldi	r20, 0x38	; 56
     d8a:	53 e4       	ldi	r21, 0x43	; 67
     d8c:	c7 01       	movw	r24, r14
     d8e:	b6 01       	movw	r22, r12
     d90:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     d94:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fixunssfsi>
     d98:	86 2f       	mov	r24, r22
     d9a:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
		page_inc=page_inc+0.5;
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	5f e3       	ldi	r21, 0x3F	; 63
     da6:	c7 01       	movw	r24, r14
     da8:	b6 01       	movw	r22, r12
     daa:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     dae:	6b 01       	movw	r12, r22
     db0:	7c 01       	movw	r14, r24
     db2:	01 50       	subi	r16, 0x01	; 1
     db4:	11 09       	sbc	r17, r1

	Command_Port |= (1 << CS2);		/* Select first Left half of display */
	Command_Port &= ~(1 << CS1);
	GLCD_Command((page_add));
	//GLCD_Command(0x40);
	for(page=0;page<16;page++)		/* Print 16 pages i.e. 8 page of each half of display */
     db6:	19 f0       	breq	.+6      	; 0xdbe <GLCD_white_screen+0x8e>
		num++;
		GLCD_Data(str[i]);
	}
}
void GLCD_white_screen()	/* GLCD string write function */
{
     db8:	c0 e4       	ldi	r28, 0x40	; 64
     dba:	d0 e0       	ldi	r29, 0x00	; 0
     dbc:	d8 cf       	rjmp	.-80     	; 0xd6e <GLCD_white_screen+0x3e>
		Command_Port ^= (1 << CS2);
		GLCD_Command((page_add+page_inc));/* Increment page address */
		page_inc=page_inc+0.5;
		k=k+64;						/* Increment pointer */
	}
	GLCD_Command(0x40);				/* Set Y address (column=0) */
     dbe:	80 e4       	ldi	r24, 0x40	; 64
     dc0:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
	GLCD_Command(0xB8);				/* Set x address (page=0) */
     dc4:	88 eb       	ldi	r24, 0xB8	; 184
     dc6:	0e 94 c1 01 	call	0x382	; 0x382 <GLCD_Command>
}
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	ff 90       	pop	r15
     dd4:	ef 90       	pop	r14
     dd6:	df 90       	pop	r13
     dd8:	cf 90       	pop	r12
     dda:	bf 90       	pop	r11
     ddc:	af 90       	pop	r10
     dde:	08 95       	ret

00000de0 <__vector_11>:
volatile u16 Read_2 = 0;
volatile u16 Read_3 = 0;
volatile u16 Num_OV = 0;
volatile u8 counter=0;
//****************************
ISR(TIMER0_OVF_vect){
     de0:	1f 92       	push	r1
     de2:	0f 92       	push	r0
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	0f 92       	push	r0
     de8:	11 24       	eor	r1, r1
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
	Num_OV++;
     e02:	80 91 9d 02 	lds	r24, 0x029D
     e06:	90 91 9e 02 	lds	r25, 0x029E
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	90 93 9e 02 	sts	0x029E, r25
     e10:	80 93 9d 02 	sts	0x029D, r24
	if(DIO_voidGtPinValue(DIO_U8_PORTD, 5) == 0)
     e14:	65 e0       	ldi	r22, 0x05	; 5
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_voidGtPinValue>
     e1c:	81 11       	cpse	r24, r1
     e1e:	06 c0       	rjmp	.+12     	; 0xe2c <__vector_11+0x4c>
	{
	DIO_voidSetPinValue(DIO_U8_PORTD,DIO_U8_PIN5,DIO_U8_HIGH);
     e20:	41 e0       	ldi	r20, 0x01	; 1
     e22:	65 e0       	ldi	r22, 0x05	; 5
     e24:	83 e0       	ldi	r24, 0x03	; 3
     e26:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_voidSetPinValue>
     e2a:	05 c0       	rjmp	.+10     	; 0xe36 <__vector_11+0x56>
	}
	else
	{
	DIO_voidSetPinValue(DIO_U8_PORTD,DIO_U8_PIN5,DIO_U8_LOW);
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	65 e0       	ldi	r22, 0x05	; 5
     e30:	83 e0       	ldi	r24, 0x03	; 3
     e32:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_voidSetPinValue>
	}
}
     e36:	ff 91       	pop	r31
     e38:	ef 91       	pop	r30
     e3a:	bf 91       	pop	r27
     e3c:	af 91       	pop	r26
     e3e:	9f 91       	pop	r25
     e40:	8f 91       	pop	r24
     e42:	7f 91       	pop	r23
     e44:	6f 91       	pop	r22
     e46:	5f 91       	pop	r21
     e48:	4f 91       	pop	r20
     e4a:	3f 91       	pop	r19
     e4c:	2f 91       	pop	r18
     e4e:	0f 90       	pop	r0
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	0f 90       	pop	r0
     e54:	1f 90       	pop	r1
     e56:	18 95       	reti

00000e58 <main>:
//****************************
int main(void)
{
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	6e 97       	sbiw	r28, 0x1e	; 30
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
	GLCD_Init();
     e6c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <GLCD_Init>
	GLCD_ClearAll();
     e70:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <GLCD_ClearAll>
	DIO_voidSetPinDir(DIO_U8_PORTD,DIO_U8_PIN5,DIO_U8_OUTPUT);
     e74:	41 e0       	ldi	r20, 0x01	; 1
     e76:	65 e0       	ldi	r22, 0x05	; 5
     e78:	83 e0       	ldi	r24, 0x03	; 3
     e7a:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_voidSetPinDir>
	DIO_voidSetPinValue(DIO_U8_PORTD,DIO_U8_PIN5,DIO_U8_HIGH);
     e7e:	41 e0       	ldi	r20, 0x01	; 1
     e80:	65 e0       	ldi	r22, 0x05	; 5
     e82:	83 e0       	ldi	r24, 0x03	; 3
     e84:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_voidSetPinValue>
	u8 Copy_u8Val=0;
	EXTI0_voidInit();
     e88:	0e 94 ac 01 	call	0x358	; 0x358 <EXTI0_voidInit>
	EXTI0_voidEnable();
     e8c:	0e 94 a0 01 	call	0x340	; 0x340 <EXTI0_voidEnable>
	GIE_voidEnable();	
     e90:	0e 94 b9 01 	call	0x372	; 0x372 <GIE_voidEnable>
	f32 frequancy = 0;
	f32 Duty_Cycle = 0;
	f32 time= 0 ;
	Timer0_vidInit();
     e94:	0e 94 b2 09 	call	0x1364	; 0x1364 <Timer0_vidInit>
	Timer_vidSetTimerCounts(Copy_u8Val);
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	0e 94 ba 09 	call	0x1374	; 0x1374 <Timer_vidSetTimerCounts>
	Timer_vidEnableInterrupt();
     e9e:	0e 94 be 09 	call	0x137c	; 0x137c <Timer_vidEnableInterrupt>
//****************************
		s8 freq1[10];		
		s8 duty1[10];
		s8 TIME1[10];
//****************************
		while(DIO_voidGtPinValue(DIO_U8_PORTD, 5) == 1);
     ea2:	65 e0       	ldi	r22, 0x05	; 5
     ea4:	83 e0       	ldi	r24, 0x03	; 3
     ea6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_voidGtPinValue>
     eaa:	81 30       	cpi	r24, 0x01	; 1
     eac:	d1 f3       	breq	.-12     	; 0xea2 <main+0x4a>
		if(counter!=2){
     eae:	80 91 9c 02 	lds	r24, 0x029C
     eb2:	82 30       	cpi	r24, 0x02	; 2
     eb4:	99 f0       	breq	.+38     	; 0xedc <main+0x84>
		Read_1=Timer_u8GetTimerCounts()+Num_OV*256;
     eb6:	0e 94 bc 09 	call	0x1378	; 0x1378 <Timer_u8GetTimerCounts>
     eba:	20 91 9d 02 	lds	r18, 0x029D
     ebe:	30 91 9e 02 	lds	r19, 0x029E
     ec2:	32 2f       	mov	r19, r18
     ec4:	22 27       	eor	r18, r18
     ec6:	28 0f       	add	r18, r24
     ec8:	31 1d       	adc	r19, r1
     eca:	30 93 a2 02 	sts	0x02A2, r19
     ece:	20 93 a1 02 	sts	0x02A1, r18
		counter++;
     ed2:	80 91 9c 02 	lds	r24, 0x029C
     ed6:	8f 5f       	subi	r24, 0xFF	; 255
     ed8:	80 93 9c 02 	sts	0x029C, r24
		}
		//****************************
		Num_OV=0;		
     edc:	10 92 9e 02 	sts	0x029E, r1
     ee0:	10 92 9d 02 	sts	0x029D, r1
		while(DIO_voidGtPinValue(DIO_U8_PORTD, 5) == 0);
     ee4:	65 e0       	ldi	r22, 0x05	; 5
     ee6:	83 e0       	ldi	r24, 0x03	; 3
     ee8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_voidGtPinValue>
     eec:	88 23       	and	r24, r24
     eee:	d1 f3       	breq	.-12     	; 0xee4 <main+0x8c>
		if(counter!=2){
     ef0:	80 91 9c 02 	lds	r24, 0x029C
     ef4:	82 30       	cpi	r24, 0x02	; 2
     ef6:	99 f0       	breq	.+38     	; 0xf1e <main+0xc6>
		Read_2=Timer_u8GetTimerCounts()+Num_OV*256;	
     ef8:	0e 94 bc 09 	call	0x1378	; 0x1378 <Timer_u8GetTimerCounts>
     efc:	20 91 9d 02 	lds	r18, 0x029D
     f00:	30 91 9e 02 	lds	r19, 0x029E
     f04:	32 2f       	mov	r19, r18
     f06:	22 27       	eor	r18, r18
     f08:	28 0f       	add	r18, r24
     f0a:	31 1d       	adc	r19, r1
     f0c:	30 93 a0 02 	sts	0x02A0, r19
     f10:	20 93 9f 02 	sts	0x029F, r18
		counter++;	
     f14:	80 91 9c 02 	lds	r24, 0x029C
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	80 93 9c 02 	sts	0x029C, r24
		}	
		//****************************	
		frequancy = (float)(1.0 / ( ((float)Read_2 + Read_1)*1000 * (8.0 / 8000000.0)));
     f1e:	60 91 9f 02 	lds	r22, 0x029F
     f22:	70 91 a0 02 	lds	r23, 0x02A0
     f26:	00 91 a1 02 	lds	r16, 0x02A1
     f2a:	10 91 a2 02 	lds	r17, 0x02A2
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatunsisf>
     f36:	6b 01       	movw	r12, r22
     f38:	7c 01       	movw	r14, r24
     f3a:	b8 01       	movw	r22, r16
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatunsisf>
     f44:	9b 01       	movw	r18, r22
     f46:	ac 01       	movw	r20, r24
     f48:	c7 01       	movw	r24, r14
     f4a:	b6 01       	movw	r22, r12
     f4c:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	4a e7       	ldi	r20, 0x7A	; 122
     f56:	54 e4       	ldi	r21, 0x44	; 68
     f58:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__mulsf3>
     f5c:	2d eb       	ldi	r18, 0xBD	; 189
     f5e:	37 e3       	ldi	r19, 0x37	; 55
     f60:	46 e8       	ldi	r20, 0x86	; 134
     f62:	55 e3       	ldi	r21, 0x35	; 53
     f64:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__mulsf3>
     f68:	9b 01       	movw	r18, r22
     f6a:	ac 01       	movw	r20, r24
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	80 e8       	ldi	r24, 0x80	; 128
     f72:	9f e3       	ldi	r25, 0x3F	; 63
     f74:	0e 94 2f 0a 	call	0x145e	; 0x145e <__divsf3>
     f78:	4b 01       	movw	r8, r22
     f7a:	5c 01       	movw	r10, r24
		ftoa(frequancy,freq1,1);
     f7c:	21 e0       	ldi	r18, 0x01	; 1
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	ae 01       	movw	r20, r28
     f82:	4f 5f       	subi	r20, 0xFF	; 255
     f84:	5f 4f       	sbci	r21, 0xFF	; 255
     f86:	0e 94 47 09 	call	0x128e	; 0x128e <ftoa>
		Duty_Cycle =(float)Read_1* 100.0/(Read_2 + Read_1);
     f8a:	60 91 a1 02 	lds	r22, 0x02A1
     f8e:	70 91 a2 02 	lds	r23, 0x02A2
     f92:	00 91 9f 02 	lds	r16, 0x029F
     f96:	10 91 a0 02 	lds	r17, 0x02A0
     f9a:	e0 90 a1 02 	lds	r14, 0x02A1
     f9e:	f0 90 a2 02 	lds	r15, 0x02A2
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatunsisf>
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	48 ec       	ldi	r20, 0xC8	; 200
     fb0:	52 e4       	ldi	r21, 0x42	; 66
     fb2:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__mulsf3>
     fb6:	2b 01       	movw	r4, r22
     fb8:	3c 01       	movw	r6, r24
     fba:	b7 01       	movw	r22, r14
     fbc:	60 0f       	add	r22, r16
     fbe:	71 1f       	adc	r23, r17
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatunsisf>
     fc8:	9b 01       	movw	r18, r22
     fca:	ac 01       	movw	r20, r24
     fcc:	c3 01       	movw	r24, r6
     fce:	b2 01       	movw	r22, r4
     fd0:	0e 94 2f 0a 	call	0x145e	; 0x145e <__divsf3>
		ftoa(Duty_Cycle,duty1,1);
     fd4:	21 e0       	ldi	r18, 0x01	; 1
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	ae 01       	movw	r20, r28
     fda:	45 5f       	subi	r20, 0xF5	; 245
     fdc:	5f 4f       	sbci	r21, 0xFF	; 255
     fde:	0e 94 47 09 	call	0x128e	; 0x128e <ftoa>
		time=((float)1.0/frequancy)*1000.0;
     fe2:	a5 01       	movw	r20, r10
     fe4:	94 01       	movw	r18, r8
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	80 e8       	ldi	r24, 0x80	; 128
     fec:	9f e3       	ldi	r25, 0x3F	; 63
     fee:	0e 94 2f 0a 	call	0x145e	; 0x145e <__divsf3>
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4a e7       	ldi	r20, 0x7A	; 122
     ff8:	54 e4       	ldi	r21, 0x44	; 68
     ffa:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__mulsf3>
		ftoa(time,TIME1,1);		
     ffe:	21 e0       	ldi	r18, 0x01	; 1
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	ae 01       	movw	r20, r28
    1004:	4b 5e       	subi	r20, 0xEB	; 235
    1006:	5f 4f       	sbci	r21, 0xFF	; 255
    1008:	0e 94 47 09 	call	0x128e	; 0x128e <ftoa>
		//****************************			
		if(counter==2){
    100c:	80 91 9c 02 	lds	r24, 0x029C
    1010:	82 30       	cpi	r24, 0x02	; 2
    1012:	09 f0       	breq	.+2      	; 0x1016 <main+0x1be>
    1014:	d9 c0       	rjmp	.+434    	; 0x11c8 <main+0x370>
			
			GLCD_white_screen();
    1016:	0e 94 98 06 	call	0xd30	; 0xd30 <GLCD_white_screen>
			GLCD_Stringleft(0,"F=");
    101a:	6c e7       	ldi	r22, 0x7C	; 124
    101c:	72 e0       	ldi	r23, 0x02	; 2
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <GLCD_Stringleft>
			GLCD_Stringleft(0,freq1);
    1026:	be 01       	movw	r22, r28
    1028:	6f 5f       	subi	r22, 0xFF	; 255
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <GLCD_Stringleft>
			GLCD_Stringleft(0,"KHZ");
    1034:	6f e7       	ldi	r22, 0x7F	; 127
    1036:	72 e0       	ldi	r23, 0x02	; 2
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <GLCD_Stringleft>
			GLCD_Stringright(0,"  ");
    1040:	63 e8       	ldi	r22, 0x83	; 131
    1042:	72 e0       	ldi	r23, 0x02	; 2
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 17 02 	call	0x42e	; 0x42e <GLCD_Stringright>
			GLCD_Stringright(0,"D=");
    104c:	66 e8       	ldi	r22, 0x86	; 134
    104e:	72 e0       	ldi	r23, 0x02	; 2
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 17 02 	call	0x42e	; 0x42e <GLCD_Stringright>
			GLCD_Stringright(0,duty1);
    1058:	be 01       	movw	r22, r28
    105a:	65 5f       	subi	r22, 0xF5	; 245
    105c:	7f 4f       	sbci	r23, 0xFF	; 255
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 17 02 	call	0x42e	; 0x42e <GLCD_Stringright>
			GLCD_Stringright(0,"%");
    1066:	69 e8       	ldi	r22, 0x89	; 137
    1068:	72 e0       	ldi	r23, 0x02	; 2
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 17 02 	call	0x42e	; 0x42e <GLCD_Stringright>
			//GLCD_Stringleft(1," ");
			GLCD_Stringleft(1,"T=");
    1072:	6b e8       	ldi	r22, 0x8B	; 139
    1074:	72 e0       	ldi	r23, 0x02	; 2
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <GLCD_Stringleft>
			GLCD_Stringleft(1,TIME1);
    107e:	be 01       	movw	r22, r28
    1080:	6b 5e       	subi	r22, 0xEB	; 235
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <GLCD_Stringleft>
			GLCD_Stringleft(1,"ms");
    108c:	6e e8       	ldi	r22, 0x8E	; 142
    108e:	72 e0       	ldi	r23, 0x02	; 2
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <GLCD_Stringleft>
		//******************************						
			GLCD_String_send(4,LOW);
    1098:	6d e6       	ldi	r22, 0x6D	; 109
    109a:	72 e0       	ldi	r23, 0x02	; 2
    109c:	84 e0       	ldi	r24, 0x04	; 4
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 8b 05 	call	0xb16	; 0xb16 <GLCD_String_send>
			GLCD_String_send(4,LOW);
    10a4:	6d e6       	ldi	r22, 0x6D	; 109
    10a6:	72 e0       	ldi	r23, 0x02	; 2
    10a8:	84 e0       	ldi	r24, 0x04	; 4
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 8b 05 	call	0xb16	; 0xb16 <GLCD_String_send>
			GLCD_String_send(4,STARTHIGH);
    10b0:	68 e6       	ldi	r22, 0x68	; 104
    10b2:	72 e0       	ldi	r23, 0x02	; 2
    10b4:	84 e0       	ldi	r24, 0x04	; 4
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	0e 94 8b 05 	call	0xb16	; 0xb16 <GLCD_String_send>
			GLCD_String_send(4,UPPER);
    10bc:	67 e7       	ldi	r22, 0x77	; 119
    10be:	72 e0       	ldi	r23, 0x02	; 2
    10c0:	84 e0       	ldi	r24, 0x04	; 4
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 8b 05 	call	0xb16	; 0xb16 <GLCD_String_send>
			GLCD_String_send(4,UPPER);
    10c8:	67 e7       	ldi	r22, 0x77	; 119
    10ca:	72 e0       	ldi	r23, 0x02	; 2
    10cc:	84 e0       	ldi	r24, 0x04	; 4
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 8b 05 	call	0xb16	; 0xb16 <GLCD_String_send>
			GLCD_String_send(4,STARTLOW);
    10d4:	62 e7       	ldi	r22, 0x72	; 114
    10d6:	72 e0       	ldi	r23, 0x02	; 2
    10d8:	84 e0       	ldi	r24, 0x04	; 4
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 8b 05 	call	0xb16	; 0xb16 <GLCD_String_send>
			GLCD_String_send(4,LOW);
    10e0:	6d e6       	ldi	r22, 0x6D	; 109
    10e2:	72 e0       	ldi	r23, 0x02	; 2
    10e4:	84 e0       	ldi	r24, 0x04	; 4
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 8b 05 	call	0xb16	; 0xb16 <GLCD_String_send>
			GLCD_String_send(4,LOW);
    10ec:	6d e6       	ldi	r22, 0x6D	; 109
    10ee:	72 e0       	ldi	r23, 0x02	; 2
    10f0:	84 e0       	ldi	r24, 0x04	; 4
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 8b 05 	call	0xb16	; 0xb16 <GLCD_String_send>
			GLCD_String_send(4,STARTHIGH);
    10f8:	68 e6       	ldi	r22, 0x68	; 104
    10fa:	72 e0       	ldi	r23, 0x02	; 2
    10fc:	84 e0       	ldi	r24, 0x04	; 4
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 8b 05 	call	0xb16	; 0xb16 <GLCD_String_send>
			GLCD_String_send(4,UPPER);
    1104:	67 e7       	ldi	r22, 0x77	; 119
    1106:	72 e0       	ldi	r23, 0x02	; 2
    1108:	84 e0       	ldi	r24, 0x04	; 4
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 8b 05 	call	0xb16	; 0xb16 <GLCD_String_send>
			GLCD_String_send(4,UPPER);
    1110:	67 e7       	ldi	r22, 0x77	; 119
    1112:	72 e0       	ldi	r23, 0x02	; 2
    1114:	84 e0       	ldi	r24, 0x04	; 4
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 8b 05 	call	0xb16	; 0xb16 <GLCD_String_send>
			GLCD_String_send(4,STARTLOW);
    111c:	62 e7       	ldi	r22, 0x72	; 114
    111e:	72 e0       	ldi	r23, 0x02	; 2
    1120:	84 e0       	ldi	r24, 0x04	; 4
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 8b 05 	call	0xb16	; 0xb16 <GLCD_String_send>
			GLCD_String_send(4,LOW);
    1128:	6d e6       	ldi	r22, 0x6D	; 109
    112a:	72 e0       	ldi	r23, 0x02	; 2
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 8b 05 	call	0xb16	; 0xb16 <GLCD_String_send>
		//**********************************	
			GLCD_String_send2(4,LOW);
    1134:	6d e6       	ldi	r22, 0x6D	; 109
    1136:	72 e0       	ldi	r23, 0x02	; 2
    1138:	84 e0       	ldi	r24, 0x04	; 4
    113a:	0e 94 19 06 	call	0xc32	; 0xc32 <GLCD_String_send2>
			GLCD_String_send2(4,STARTHIGH);
    113e:	68 e6       	ldi	r22, 0x68	; 104
    1140:	72 e0       	ldi	r23, 0x02	; 2
    1142:	84 e0       	ldi	r24, 0x04	; 4
    1144:	0e 94 19 06 	call	0xc32	; 0xc32 <GLCD_String_send2>
			GLCD_String_send2(4,UPPER);
    1148:	67 e7       	ldi	r22, 0x77	; 119
    114a:	72 e0       	ldi	r23, 0x02	; 2
    114c:	84 e0       	ldi	r24, 0x04	; 4
    114e:	0e 94 19 06 	call	0xc32	; 0xc32 <GLCD_String_send2>
			GLCD_String_send2(4,UPPER);
    1152:	67 e7       	ldi	r22, 0x77	; 119
    1154:	72 e0       	ldi	r23, 0x02	; 2
    1156:	84 e0       	ldi	r24, 0x04	; 4
    1158:	0e 94 19 06 	call	0xc32	; 0xc32 <GLCD_String_send2>
			GLCD_String_send2(4,STARTLOW);
    115c:	62 e7       	ldi	r22, 0x72	; 114
    115e:	72 e0       	ldi	r23, 0x02	; 2
    1160:	84 e0       	ldi	r24, 0x04	; 4
    1162:	0e 94 19 06 	call	0xc32	; 0xc32 <GLCD_String_send2>
			GLCD_String_send2(4,LOW);
    1166:	6d e6       	ldi	r22, 0x6D	; 109
    1168:	72 e0       	ldi	r23, 0x02	; 2
    116a:	84 e0       	ldi	r24, 0x04	; 4
    116c:	0e 94 19 06 	call	0xc32	; 0xc32 <GLCD_String_send2>
			GLCD_String_send2(4,LOW);
    1170:	6d e6       	ldi	r22, 0x6D	; 109
    1172:	72 e0       	ldi	r23, 0x02	; 2
    1174:	84 e0       	ldi	r24, 0x04	; 4
    1176:	0e 94 19 06 	call	0xc32	; 0xc32 <GLCD_String_send2>
			GLCD_String_send2(4,STARTHIGH);
    117a:	68 e6       	ldi	r22, 0x68	; 104
    117c:	72 e0       	ldi	r23, 0x02	; 2
    117e:	84 e0       	ldi	r24, 0x04	; 4
    1180:	0e 94 19 06 	call	0xc32	; 0xc32 <GLCD_String_send2>
			GLCD_String_send2(4,UPPER);
    1184:	67 e7       	ldi	r22, 0x77	; 119
    1186:	72 e0       	ldi	r23, 0x02	; 2
    1188:	84 e0       	ldi	r24, 0x04	; 4
    118a:	0e 94 19 06 	call	0xc32	; 0xc32 <GLCD_String_send2>
			GLCD_String_send2(4,UPPER);
    118e:	67 e7       	ldi	r22, 0x77	; 119
    1190:	72 e0       	ldi	r23, 0x02	; 2
    1192:	84 e0       	ldi	r24, 0x04	; 4
    1194:	0e 94 19 06 	call	0xc32	; 0xc32 <GLCD_String_send2>
			GLCD_String_send2(4,STARTLOW);
    1198:	62 e7       	ldi	r22, 0x72	; 114
    119a:	72 e0       	ldi	r23, 0x02	; 2
    119c:	84 e0       	ldi	r24, 0x04	; 4
    119e:	0e 94 19 06 	call	0xc32	; 0xc32 <GLCD_String_send2>
			GLCD_String_send2(4,LOW);
    11a2:	6d e6       	ldi	r22, 0x6D	; 109
    11a4:	72 e0       	ldi	r23, 0x02	; 2
    11a6:	84 e0       	ldi	r24, 0x04	; 4
    11a8:	0e 94 19 06 	call	0xc32	; 0xc32 <GLCD_String_send2>
			GLCD_String_send2(4,LOW);			
    11ac:	6d e6       	ldi	r22, 0x6D	; 109
    11ae:	72 e0       	ldi	r23, 0x02	; 2
    11b0:	84 e0       	ldi	r24, 0x04	; 4
    11b2:	0e 94 19 06 	call	0xc32	; 0xc32 <GLCD_String_send2>
    11b6:	2f ef       	ldi	r18, 0xFF	; 255
    11b8:	89 e6       	ldi	r24, 0x69	; 105
    11ba:	98 e1       	ldi	r25, 0x18	; 24
    11bc:	21 50       	subi	r18, 0x01	; 1
    11be:	80 40       	sbci	r24, 0x00	; 0
    11c0:	90 40       	sbci	r25, 0x00	; 0
    11c2:	e1 f7       	brne	.-8      	; 0x11bc <main+0x364>
    11c4:	00 c0       	rjmp	.+0      	; 0x11c6 <main+0x36e>
    11c6:	00 00       	nop
    11c8:	2f ef       	ldi	r18, 0xFF	; 255
    11ca:	81 e1       	ldi	r24, 0x11	; 17
    11cc:	9a e7       	ldi	r25, 0x7A	; 122
    11ce:	21 50       	subi	r18, 0x01	; 1
    11d0:	80 40       	sbci	r24, 0x00	; 0
    11d2:	90 40       	sbci	r25, 0x00	; 0
    11d4:	e1 f7       	brne	.-8      	; 0x11ce <main+0x376>
    11d6:	00 c0       	rjmp	.+0      	; 0x11d8 <main+0x380>
    11d8:	00 00       	nop
			_delay_ms(1000);
			
		}
		_delay_ms(5000);
		Num_OV=0;
    11da:	10 92 9e 02 	sts	0x029E, r1
    11de:	10 92 9d 02 	sts	0x029D, r1
		while(1);
    11e2:	ff cf       	rjmp	.-2      	; 0x11e2 <main+0x38a>

000011e4 <reverse>:
#include <stdio.h>
#include "string1.h"

void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
    11e4:	9b 01       	movw	r18, r22
    11e6:	21 50       	subi	r18, 0x01	; 1
    11e8:	31 09       	sbc	r19, r1
	while (i < j) {
    11ea:	12 16       	cp	r1, r18
    11ec:	13 06       	cpc	r1, r19
    11ee:	84 f4       	brge	.+32     	; 0x1210 <reverse+0x2c>
    11f0:	fc 01       	movw	r30, r24
    11f2:	e6 0f       	add	r30, r22
    11f4:	f7 1f       	adc	r31, r23
    11f6:	dc 01       	movw	r26, r24
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
		temp = str[i];
    11fc:	4c 91       	ld	r20, X
		str[i] = str[j];
    11fe:	52 91       	ld	r21, -Z
    1200:	5d 93       	st	X+, r21
		str[j] = temp;
    1202:	40 83       	st	Z, r20
		i++;
    1204:	01 96       	adiw	r24, 0x01	; 1
		j--;
    1206:	21 50       	subi	r18, 0x01	; 1
    1208:	31 09       	sbc	r19, r1
#include "string1.h"

void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
	while (i < j) {
    120a:	82 17       	cp	r24, r18
    120c:	93 07       	cpc	r25, r19
    120e:	b4 f3       	brlt	.-20     	; 0x11fc <reverse+0x18>
    1210:	08 95       	ret

00001212 <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
    1212:	ef 92       	push	r14
    1214:	ff 92       	push	r15
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	8b 01       	movw	r16, r22
    1220:	9a 01       	movw	r18, r20
	int i = 0;
	while (x) {
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	99 f0       	breq	.+38     	; 0x124c <intToStr+0x3a>
    1226:	fb 01       	movw	r30, r22
    1228:	c0 e0       	ldi	r28, 0x00	; 0
    122a:	d0 e0       	ldi	r29, 0x00	; 0
		str[i++] = (x % 10) + '0';
    122c:	0f 2e       	mov	r0, r31
    122e:	fa e0       	ldi	r31, 0x0A	; 10
    1230:	ef 2e       	mov	r14, r31
    1232:	f1 2c       	mov	r15, r1
    1234:	f0 2d       	mov	r31, r0
    1236:	21 96       	adiw	r28, 0x01	; 1
    1238:	b7 01       	movw	r22, r14
    123a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__divmodhi4>
    123e:	80 5d       	subi	r24, 0xD0	; 208
    1240:	81 93       	st	Z+, r24
		x = x / 10;
    1242:	86 2f       	mov	r24, r22
    1244:	97 2f       	mov	r25, r23
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x) {
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	b1 f7       	brne	.-20     	; 0x1236 <intToStr+0x24>
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <intToStr+0x3e>
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
	int i = 0;
    124c:	c0 e0       	ldi	r28, 0x00	; 0
    124e:	d0 e0       	ldi	r29, 0x00	; 0
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
    1250:	c2 17       	cp	r28, r18
    1252:	d3 07       	cpc	r29, r19
    1254:	64 f4       	brge	.+24     	; 0x126e <intToStr+0x5c>
    1256:	f8 01       	movw	r30, r16
    1258:	ec 0f       	add	r30, r28
    125a:	fd 1f       	adc	r31, r29
    125c:	a8 01       	movw	r20, r16
    125e:	42 0f       	add	r20, r18
    1260:	53 1f       	adc	r21, r19
	str[i++] = '0';
    1262:	80 e3       	ldi	r24, 0x30	; 48
    1264:	81 93       	st	Z+, r24
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
    1266:	e4 17       	cp	r30, r20
    1268:	f5 07       	cpc	r31, r21
    126a:	e1 f7       	brne	.-8      	; 0x1264 <intToStr+0x52>
    126c:	e9 01       	movw	r28, r18
	str[i++] = '0';
	
	reverse(str, i);
    126e:	be 01       	movw	r22, r28
    1270:	c8 01       	movw	r24, r16
    1272:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <reverse>
	str[i] = '\0';
    1276:	f8 01       	movw	r30, r16
    1278:	ec 0f       	add	r30, r28
    127a:	fd 1f       	adc	r31, r29
    127c:	10 82       	st	Z, r1
	return i;
}
    127e:	ce 01       	movw	r24, r28
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	08 95       	ret

0000128e <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
    128e:	2f 92       	push	r2
    1290:	3f 92       	push	r3
    1292:	4f 92       	push	r4
    1294:	5f 92       	push	r5
    1296:	6f 92       	push	r6
    1298:	7f 92       	push	r7
    129a:	8f 92       	push	r8
    129c:	9f 92       	push	r9
    129e:	af 92       	push	r10
    12a0:	bf 92       	push	r11
    12a2:	cf 92       	push	r12
    12a4:	df 92       	push	r13
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	4b 01       	movw	r8, r22
    12b4:	5c 01       	movw	r10, r24
    12b6:	8a 01       	movw	r16, r20
    12b8:	e9 01       	movw	r28, r18
	// Extract integer part
	int ipart = (int)n;
    12ba:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__fixsfsi>
    12be:	6b 01       	movw	r12, r22
    12c0:	7c 01       	movw	r14, r24
	
	// Extract floating part
	float fpart = n - (float)ipart;
	
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	b8 01       	movw	r22, r16
    12c8:	c6 01       	movw	r24, r12
    12ca:	0e 94 09 09 	call	0x1212	; 0x1212 <intToStr>
    12ce:	1c 01       	movw	r2, r24
	
	// check for display option after point
	if (afterpoint != 0) {
    12d0:	20 97       	sbiw	r28, 0x00	; 0
    12d2:	a9 f1       	breq	.+106    	; 0x133e <ftoa+0xb0>
		res[i] = '.'; // add dot
    12d4:	f8 01       	movw	r30, r16
    12d6:	e8 0f       	add	r30, r24
    12d8:	f9 1f       	adc	r31, r25
    12da:	8e e2       	ldi	r24, 0x2E	; 46
    12dc:	80 83       	st	Z, r24
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
    12de:	be 01       	movw	r22, r28
    12e0:	0d 2e       	mov	r0, r29
    12e2:	00 0c       	add	r0, r0
    12e4:	88 0b       	sbc	r24, r24
    12e6:	99 0b       	sbc	r25, r25
    12e8:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__floatsisf>
    12ec:	9b 01       	movw	r18, r22
    12ee:	ac 01       	movw	r20, r24
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	80 e2       	ldi	r24, 0x20	; 32
    12f6:	91 e4       	ldi	r25, 0x41	; 65
    12f8:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <pow>
    12fc:	2b 01       	movw	r4, r22
    12fe:	3c 01       	movw	r6, r24
{
	// Extract integer part
	int ipart = (int)n;
	
	// Extract floating part
	float fpart = n - (float)ipart;
    1300:	b6 01       	movw	r22, r12
    1302:	dd 0c       	add	r13, r13
    1304:	88 0b       	sbc	r24, r24
    1306:	99 0b       	sbc	r25, r25
    1308:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__floatsisf>
    130c:	9b 01       	movw	r18, r22
    130e:	ac 01       	movw	r20, r24
    1310:	c5 01       	movw	r24, r10
    1312:	b4 01       	movw	r22, r8
    1314:	0e 94 c2 09 	call	0x1384	; 0x1384 <__subsf3>
    1318:	9b 01       	movw	r18, r22
    131a:	ac 01       	movw	r20, r24
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
		
		intToStr((int)fpart, res + i + 1, afterpoint);
    131c:	8f ef       	ldi	r24, 0xFF	; 255
    131e:	28 1a       	sub	r2, r24
    1320:	38 0a       	sbc	r3, r24
    1322:	02 0d       	add	r16, r2
    1324:	13 1d       	adc	r17, r3
		res[i] = '.'; // add dot
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
    1326:	c3 01       	movw	r24, r6
    1328:	b2 01       	movw	r22, r4
    132a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__mulsf3>
		
		intToStr((int)fpart, res + i + 1, afterpoint);
    132e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__fixsfsi>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	ae 01       	movw	r20, r28
    1338:	b8 01       	movw	r22, r16
    133a:	0e 94 09 09 	call	0x1212	; 0x1212 <intToStr>
	}
}
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	ef 90       	pop	r14
    134a:	df 90       	pop	r13
    134c:	cf 90       	pop	r12
    134e:	bf 90       	pop	r11
    1350:	af 90       	pop	r10
    1352:	9f 90       	pop	r9
    1354:	8f 90       	pop	r8
    1356:	7f 90       	pop	r7
    1358:	6f 90       	pop	r6
    135a:	5f 90       	pop	r5
    135c:	4f 90       	pop	r4
    135e:	3f 90       	pop	r3
    1360:	2f 90       	pop	r2
    1362:	08 95       	ret

00001364 <Timer0_vidInit>:
    1364:	83 b7       	in	r24, 0x33	; 51
    1366:	80 7b       	andi	r24, 0xB0	; 176
    1368:	82 60       	ori	r24, 0x02	; 2
    136a:	83 bf       	out	0x33, r24	; 51
    136c:	89 b7       	in	r24, 0x39	; 57
    136e:	81 60       	ori	r24, 0x01	; 1
    1370:	89 bf       	out	0x39, r24	; 57
    1372:	08 95       	ret

00001374 <Timer_vidSetTimerCounts>:
    1374:	82 bf       	out	0x32, r24	; 50
    1376:	08 95       	ret

00001378 <Timer_u8GetTimerCounts>:
    1378:	82 b7       	in	r24, 0x32	; 50
    137a:	08 95       	ret

0000137c <Timer_vidEnableInterrupt>:
    137c:	89 b7       	in	r24, 0x39	; 57
    137e:	81 60       	ori	r24, 0x01	; 1
    1380:	89 bf       	out	0x39, r24	; 57
    1382:	08 95       	ret

00001384 <__subsf3>:
    1384:	50 58       	subi	r21, 0x80	; 128

00001386 <__addsf3>:
    1386:	bb 27       	eor	r27, r27
    1388:	aa 27       	eor	r26, r26
    138a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__addsf3x>
    138e:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_round>
    1392:	0e 94 1d 0b 	call	0x163a	; 0x163a <__fp_pscA>
    1396:	38 f0       	brcs	.+14     	; 0x13a6 <__addsf3+0x20>
    1398:	0e 94 24 0b 	call	0x1648	; 0x1648 <__fp_pscB>
    139c:	20 f0       	brcs	.+8      	; 0x13a6 <__addsf3+0x20>
    139e:	39 f4       	brne	.+14     	; 0x13ae <__addsf3+0x28>
    13a0:	9f 3f       	cpi	r25, 0xFF	; 255
    13a2:	19 f4       	brne	.+6      	; 0x13aa <__addsf3+0x24>
    13a4:	26 f4       	brtc	.+8      	; 0x13ae <__addsf3+0x28>
    13a6:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_nan>
    13aa:	0e f4       	brtc	.+2      	; 0x13ae <__addsf3+0x28>
    13ac:	e0 95       	com	r30
    13ae:	e7 fb       	bst	r30, 7
    13b0:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__fp_inf>

000013b4 <__addsf3x>:
    13b4:	e9 2f       	mov	r30, r25
    13b6:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__fp_split3>
    13ba:	58 f3       	brcs	.-42     	; 0x1392 <__addsf3+0xc>
    13bc:	ba 17       	cp	r27, r26
    13be:	62 07       	cpc	r22, r18
    13c0:	73 07       	cpc	r23, r19
    13c2:	84 07       	cpc	r24, r20
    13c4:	95 07       	cpc	r25, r21
    13c6:	20 f0       	brcs	.+8      	; 0x13d0 <__addsf3x+0x1c>
    13c8:	79 f4       	brne	.+30     	; 0x13e8 <__addsf3x+0x34>
    13ca:	a6 f5       	brtc	.+104    	; 0x1434 <__addsf3x+0x80>
    13cc:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__fp_zero>
    13d0:	0e f4       	brtc	.+2      	; 0x13d4 <__addsf3x+0x20>
    13d2:	e0 95       	com	r30
    13d4:	0b 2e       	mov	r0, r27
    13d6:	ba 2f       	mov	r27, r26
    13d8:	a0 2d       	mov	r26, r0
    13da:	0b 01       	movw	r0, r22
    13dc:	b9 01       	movw	r22, r18
    13de:	90 01       	movw	r18, r0
    13e0:	0c 01       	movw	r0, r24
    13e2:	ca 01       	movw	r24, r20
    13e4:	a0 01       	movw	r20, r0
    13e6:	11 24       	eor	r1, r1
    13e8:	ff 27       	eor	r31, r31
    13ea:	59 1b       	sub	r21, r25
    13ec:	99 f0       	breq	.+38     	; 0x1414 <__addsf3x+0x60>
    13ee:	59 3f       	cpi	r21, 0xF9	; 249
    13f0:	50 f4       	brcc	.+20     	; 0x1406 <__addsf3x+0x52>
    13f2:	50 3e       	cpi	r21, 0xE0	; 224
    13f4:	68 f1       	brcs	.+90     	; 0x1450 <__addsf3x+0x9c>
    13f6:	1a 16       	cp	r1, r26
    13f8:	f0 40       	sbci	r31, 0x00	; 0
    13fa:	a2 2f       	mov	r26, r18
    13fc:	23 2f       	mov	r18, r19
    13fe:	34 2f       	mov	r19, r20
    1400:	44 27       	eor	r20, r20
    1402:	58 5f       	subi	r21, 0xF8	; 248
    1404:	f3 cf       	rjmp	.-26     	; 0x13ec <__addsf3x+0x38>
    1406:	46 95       	lsr	r20
    1408:	37 95       	ror	r19
    140a:	27 95       	ror	r18
    140c:	a7 95       	ror	r26
    140e:	f0 40       	sbci	r31, 0x00	; 0
    1410:	53 95       	inc	r21
    1412:	c9 f7       	brne	.-14     	; 0x1406 <__addsf3x+0x52>
    1414:	7e f4       	brtc	.+30     	; 0x1434 <__addsf3x+0x80>
    1416:	1f 16       	cp	r1, r31
    1418:	ba 0b       	sbc	r27, r26
    141a:	62 0b       	sbc	r22, r18
    141c:	73 0b       	sbc	r23, r19
    141e:	84 0b       	sbc	r24, r20
    1420:	ba f0       	brmi	.+46     	; 0x1450 <__addsf3x+0x9c>
    1422:	91 50       	subi	r25, 0x01	; 1
    1424:	a1 f0       	breq	.+40     	; 0x144e <__addsf3x+0x9a>
    1426:	ff 0f       	add	r31, r31
    1428:	bb 1f       	adc	r27, r27
    142a:	66 1f       	adc	r22, r22
    142c:	77 1f       	adc	r23, r23
    142e:	88 1f       	adc	r24, r24
    1430:	c2 f7       	brpl	.-16     	; 0x1422 <__addsf3x+0x6e>
    1432:	0e c0       	rjmp	.+28     	; 0x1450 <__addsf3x+0x9c>
    1434:	ba 0f       	add	r27, r26
    1436:	62 1f       	adc	r22, r18
    1438:	73 1f       	adc	r23, r19
    143a:	84 1f       	adc	r24, r20
    143c:	48 f4       	brcc	.+18     	; 0x1450 <__addsf3x+0x9c>
    143e:	87 95       	ror	r24
    1440:	77 95       	ror	r23
    1442:	67 95       	ror	r22
    1444:	b7 95       	ror	r27
    1446:	f7 95       	ror	r31
    1448:	9e 3f       	cpi	r25, 0xFE	; 254
    144a:	08 f0       	brcs	.+2      	; 0x144e <__addsf3x+0x9a>
    144c:	b0 cf       	rjmp	.-160    	; 0x13ae <__addsf3+0x28>
    144e:	93 95       	inc	r25
    1450:	88 0f       	add	r24, r24
    1452:	08 f0       	brcs	.+2      	; 0x1456 <__addsf3x+0xa2>
    1454:	99 27       	eor	r25, r25
    1456:	ee 0f       	add	r30, r30
    1458:	97 95       	ror	r25
    145a:	87 95       	ror	r24
    145c:	08 95       	ret

0000145e <__divsf3>:
    145e:	0e 94 43 0a 	call	0x1486	; 0x1486 <__divsf3x>
    1462:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_round>
    1466:	0e 94 24 0b 	call	0x1648	; 0x1648 <__fp_pscB>
    146a:	58 f0       	brcs	.+22     	; 0x1482 <__divsf3+0x24>
    146c:	0e 94 1d 0b 	call	0x163a	; 0x163a <__fp_pscA>
    1470:	40 f0       	brcs	.+16     	; 0x1482 <__divsf3+0x24>
    1472:	29 f4       	brne	.+10     	; 0x147e <__divsf3+0x20>
    1474:	5f 3f       	cpi	r21, 0xFF	; 255
    1476:	29 f0       	breq	.+10     	; 0x1482 <__divsf3+0x24>
    1478:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__fp_inf>
    147c:	51 11       	cpse	r21, r1
    147e:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_szero>
    1482:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_nan>

00001486 <__divsf3x>:
    1486:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__fp_split3>
    148a:	68 f3       	brcs	.-38     	; 0x1466 <__divsf3+0x8>

0000148c <__divsf3_pse>:
    148c:	99 23       	and	r25, r25
    148e:	b1 f3       	breq	.-20     	; 0x147c <__divsf3+0x1e>
    1490:	55 23       	and	r21, r21
    1492:	91 f3       	breq	.-28     	; 0x1478 <__divsf3+0x1a>
    1494:	95 1b       	sub	r25, r21
    1496:	55 0b       	sbc	r21, r21
    1498:	bb 27       	eor	r27, r27
    149a:	aa 27       	eor	r26, r26
    149c:	62 17       	cp	r22, r18
    149e:	73 07       	cpc	r23, r19
    14a0:	84 07       	cpc	r24, r20
    14a2:	38 f0       	brcs	.+14     	; 0x14b2 <__divsf3_pse+0x26>
    14a4:	9f 5f       	subi	r25, 0xFF	; 255
    14a6:	5f 4f       	sbci	r21, 0xFF	; 255
    14a8:	22 0f       	add	r18, r18
    14aa:	33 1f       	adc	r19, r19
    14ac:	44 1f       	adc	r20, r20
    14ae:	aa 1f       	adc	r26, r26
    14b0:	a9 f3       	breq	.-22     	; 0x149c <__divsf3_pse+0x10>
    14b2:	35 d0       	rcall	.+106    	; 0x151e <__divsf3_pse+0x92>
    14b4:	0e 2e       	mov	r0, r30
    14b6:	3a f0       	brmi	.+14     	; 0x14c6 <__divsf3_pse+0x3a>
    14b8:	e0 e8       	ldi	r30, 0x80	; 128
    14ba:	32 d0       	rcall	.+100    	; 0x1520 <__divsf3_pse+0x94>
    14bc:	91 50       	subi	r25, 0x01	; 1
    14be:	50 40       	sbci	r21, 0x00	; 0
    14c0:	e6 95       	lsr	r30
    14c2:	00 1c       	adc	r0, r0
    14c4:	ca f7       	brpl	.-14     	; 0x14b8 <__divsf3_pse+0x2c>
    14c6:	2b d0       	rcall	.+86     	; 0x151e <__divsf3_pse+0x92>
    14c8:	fe 2f       	mov	r31, r30
    14ca:	29 d0       	rcall	.+82     	; 0x151e <__divsf3_pse+0x92>
    14cc:	66 0f       	add	r22, r22
    14ce:	77 1f       	adc	r23, r23
    14d0:	88 1f       	adc	r24, r24
    14d2:	bb 1f       	adc	r27, r27
    14d4:	26 17       	cp	r18, r22
    14d6:	37 07       	cpc	r19, r23
    14d8:	48 07       	cpc	r20, r24
    14da:	ab 07       	cpc	r26, r27
    14dc:	b0 e8       	ldi	r27, 0x80	; 128
    14de:	09 f0       	breq	.+2      	; 0x14e2 <__divsf3_pse+0x56>
    14e0:	bb 0b       	sbc	r27, r27
    14e2:	80 2d       	mov	r24, r0
    14e4:	bf 01       	movw	r22, r30
    14e6:	ff 27       	eor	r31, r31
    14e8:	93 58       	subi	r25, 0x83	; 131
    14ea:	5f 4f       	sbci	r21, 0xFF	; 255
    14ec:	3a f0       	brmi	.+14     	; 0x14fc <__divsf3_pse+0x70>
    14ee:	9e 3f       	cpi	r25, 0xFE	; 254
    14f0:	51 05       	cpc	r21, r1
    14f2:	78 f0       	brcs	.+30     	; 0x1512 <__divsf3_pse+0x86>
    14f4:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__fp_inf>
    14f8:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_szero>
    14fc:	5f 3f       	cpi	r21, 0xFF	; 255
    14fe:	e4 f3       	brlt	.-8      	; 0x14f8 <__divsf3_pse+0x6c>
    1500:	98 3e       	cpi	r25, 0xE8	; 232
    1502:	d4 f3       	brlt	.-12     	; 0x14f8 <__divsf3_pse+0x6c>
    1504:	86 95       	lsr	r24
    1506:	77 95       	ror	r23
    1508:	67 95       	ror	r22
    150a:	b7 95       	ror	r27
    150c:	f7 95       	ror	r31
    150e:	9f 5f       	subi	r25, 0xFF	; 255
    1510:	c9 f7       	brne	.-14     	; 0x1504 <__divsf3_pse+0x78>
    1512:	88 0f       	add	r24, r24
    1514:	91 1d       	adc	r25, r1
    1516:	96 95       	lsr	r25
    1518:	87 95       	ror	r24
    151a:	97 f9       	bld	r25, 7
    151c:	08 95       	ret
    151e:	e1 e0       	ldi	r30, 0x01	; 1
    1520:	66 0f       	add	r22, r22
    1522:	77 1f       	adc	r23, r23
    1524:	88 1f       	adc	r24, r24
    1526:	bb 1f       	adc	r27, r27
    1528:	62 17       	cp	r22, r18
    152a:	73 07       	cpc	r23, r19
    152c:	84 07       	cpc	r24, r20
    152e:	ba 07       	cpc	r27, r26
    1530:	20 f0       	brcs	.+8      	; 0x153a <__divsf3_pse+0xae>
    1532:	62 1b       	sub	r22, r18
    1534:	73 0b       	sbc	r23, r19
    1536:	84 0b       	sbc	r24, r20
    1538:	ba 0b       	sbc	r27, r26
    153a:	ee 1f       	adc	r30, r30
    153c:	88 f7       	brcc	.-30     	; 0x1520 <__divsf3_pse+0x94>
    153e:	e0 95       	com	r30
    1540:	08 95       	ret

00001542 <__fixsfsi>:
    1542:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fixunssfsi>
    1546:	68 94       	set
    1548:	b1 11       	cpse	r27, r1
    154a:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_szero>
    154e:	08 95       	ret

00001550 <__fixunssfsi>:
    1550:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fp_splitA>
    1554:	88 f0       	brcs	.+34     	; 0x1578 <__fixunssfsi+0x28>
    1556:	9f 57       	subi	r25, 0x7F	; 127
    1558:	98 f0       	brcs	.+38     	; 0x1580 <__fixunssfsi+0x30>
    155a:	b9 2f       	mov	r27, r25
    155c:	99 27       	eor	r25, r25
    155e:	b7 51       	subi	r27, 0x17	; 23
    1560:	b0 f0       	brcs	.+44     	; 0x158e <__fixunssfsi+0x3e>
    1562:	e1 f0       	breq	.+56     	; 0x159c <__fixunssfsi+0x4c>
    1564:	66 0f       	add	r22, r22
    1566:	77 1f       	adc	r23, r23
    1568:	88 1f       	adc	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	1a f0       	brmi	.+6      	; 0x1574 <__fixunssfsi+0x24>
    156e:	ba 95       	dec	r27
    1570:	c9 f7       	brne	.-14     	; 0x1564 <__fixunssfsi+0x14>
    1572:	14 c0       	rjmp	.+40     	; 0x159c <__fixunssfsi+0x4c>
    1574:	b1 30       	cpi	r27, 0x01	; 1
    1576:	91 f0       	breq	.+36     	; 0x159c <__fixunssfsi+0x4c>
    1578:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__fp_zero>
    157c:	b1 e0       	ldi	r27, 0x01	; 1
    157e:	08 95       	ret
    1580:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__fp_zero>
    1584:	67 2f       	mov	r22, r23
    1586:	78 2f       	mov	r23, r24
    1588:	88 27       	eor	r24, r24
    158a:	b8 5f       	subi	r27, 0xF8	; 248
    158c:	39 f0       	breq	.+14     	; 0x159c <__fixunssfsi+0x4c>
    158e:	b9 3f       	cpi	r27, 0xF9	; 249
    1590:	cc f3       	brlt	.-14     	; 0x1584 <__fixunssfsi+0x34>
    1592:	86 95       	lsr	r24
    1594:	77 95       	ror	r23
    1596:	67 95       	ror	r22
    1598:	b3 95       	inc	r27
    159a:	d9 f7       	brne	.-10     	; 0x1592 <__fixunssfsi+0x42>
    159c:	3e f4       	brtc	.+14     	; 0x15ac <__fixunssfsi+0x5c>
    159e:	90 95       	com	r25
    15a0:	80 95       	com	r24
    15a2:	70 95       	com	r23
    15a4:	61 95       	neg	r22
    15a6:	7f 4f       	sbci	r23, 0xFF	; 255
    15a8:	8f 4f       	sbci	r24, 0xFF	; 255
    15aa:	9f 4f       	sbci	r25, 0xFF	; 255
    15ac:	08 95       	ret

000015ae <__floatunsisf>:
    15ae:	e8 94       	clt
    15b0:	09 c0       	rjmp	.+18     	; 0x15c4 <__floatsisf+0x12>

000015b2 <__floatsisf>:
    15b2:	97 fb       	bst	r25, 7
    15b4:	3e f4       	brtc	.+14     	; 0x15c4 <__floatsisf+0x12>
    15b6:	90 95       	com	r25
    15b8:	80 95       	com	r24
    15ba:	70 95       	com	r23
    15bc:	61 95       	neg	r22
    15be:	7f 4f       	sbci	r23, 0xFF	; 255
    15c0:	8f 4f       	sbci	r24, 0xFF	; 255
    15c2:	9f 4f       	sbci	r25, 0xFF	; 255
    15c4:	99 23       	and	r25, r25
    15c6:	a9 f0       	breq	.+42     	; 0x15f2 <__floatsisf+0x40>
    15c8:	f9 2f       	mov	r31, r25
    15ca:	96 e9       	ldi	r25, 0x96	; 150
    15cc:	bb 27       	eor	r27, r27
    15ce:	93 95       	inc	r25
    15d0:	f6 95       	lsr	r31
    15d2:	87 95       	ror	r24
    15d4:	77 95       	ror	r23
    15d6:	67 95       	ror	r22
    15d8:	b7 95       	ror	r27
    15da:	f1 11       	cpse	r31, r1
    15dc:	f8 cf       	rjmp	.-16     	; 0x15ce <__floatsisf+0x1c>
    15de:	fa f4       	brpl	.+62     	; 0x161e <__floatsisf+0x6c>
    15e0:	bb 0f       	add	r27, r27
    15e2:	11 f4       	brne	.+4      	; 0x15e8 <__floatsisf+0x36>
    15e4:	60 ff       	sbrs	r22, 0
    15e6:	1b c0       	rjmp	.+54     	; 0x161e <__floatsisf+0x6c>
    15e8:	6f 5f       	subi	r22, 0xFF	; 255
    15ea:	7f 4f       	sbci	r23, 0xFF	; 255
    15ec:	8f 4f       	sbci	r24, 0xFF	; 255
    15ee:	9f 4f       	sbci	r25, 0xFF	; 255
    15f0:	16 c0       	rjmp	.+44     	; 0x161e <__floatsisf+0x6c>
    15f2:	88 23       	and	r24, r24
    15f4:	11 f0       	breq	.+4      	; 0x15fa <__floatsisf+0x48>
    15f6:	96 e9       	ldi	r25, 0x96	; 150
    15f8:	11 c0       	rjmp	.+34     	; 0x161c <__floatsisf+0x6a>
    15fa:	77 23       	and	r23, r23
    15fc:	21 f0       	breq	.+8      	; 0x1606 <__floatsisf+0x54>
    15fe:	9e e8       	ldi	r25, 0x8E	; 142
    1600:	87 2f       	mov	r24, r23
    1602:	76 2f       	mov	r23, r22
    1604:	05 c0       	rjmp	.+10     	; 0x1610 <__floatsisf+0x5e>
    1606:	66 23       	and	r22, r22
    1608:	71 f0       	breq	.+28     	; 0x1626 <__floatsisf+0x74>
    160a:	96 e8       	ldi	r25, 0x86	; 134
    160c:	86 2f       	mov	r24, r22
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	2a f0       	brmi	.+10     	; 0x161e <__floatsisf+0x6c>
    1614:	9a 95       	dec	r25
    1616:	66 0f       	add	r22, r22
    1618:	77 1f       	adc	r23, r23
    161a:	88 1f       	adc	r24, r24
    161c:	da f7       	brpl	.-10     	; 0x1614 <__floatsisf+0x62>
    161e:	88 0f       	add	r24, r24
    1620:	96 95       	lsr	r25
    1622:	87 95       	ror	r24
    1624:	97 f9       	bld	r25, 7
    1626:	08 95       	ret

00001628 <__fp_inf>:
    1628:	97 f9       	bld	r25, 7
    162a:	9f 67       	ori	r25, 0x7F	; 127
    162c:	80 e8       	ldi	r24, 0x80	; 128
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	08 95       	ret

00001634 <__fp_nan>:
    1634:	9f ef       	ldi	r25, 0xFF	; 255
    1636:	80 ec       	ldi	r24, 0xC0	; 192
    1638:	08 95       	ret

0000163a <__fp_pscA>:
    163a:	00 24       	eor	r0, r0
    163c:	0a 94       	dec	r0
    163e:	16 16       	cp	r1, r22
    1640:	17 06       	cpc	r1, r23
    1642:	18 06       	cpc	r1, r24
    1644:	09 06       	cpc	r0, r25
    1646:	08 95       	ret

00001648 <__fp_pscB>:
    1648:	00 24       	eor	r0, r0
    164a:	0a 94       	dec	r0
    164c:	12 16       	cp	r1, r18
    164e:	13 06       	cpc	r1, r19
    1650:	14 06       	cpc	r1, r20
    1652:	05 06       	cpc	r0, r21
    1654:	08 95       	ret

00001656 <__fp_round>:
    1656:	09 2e       	mov	r0, r25
    1658:	03 94       	inc	r0
    165a:	00 0c       	add	r0, r0
    165c:	11 f4       	brne	.+4      	; 0x1662 <__fp_round+0xc>
    165e:	88 23       	and	r24, r24
    1660:	52 f0       	brmi	.+20     	; 0x1676 <__fp_round+0x20>
    1662:	bb 0f       	add	r27, r27
    1664:	40 f4       	brcc	.+16     	; 0x1676 <__fp_round+0x20>
    1666:	bf 2b       	or	r27, r31
    1668:	11 f4       	brne	.+4      	; 0x166e <__fp_round+0x18>
    166a:	60 ff       	sbrs	r22, 0
    166c:	04 c0       	rjmp	.+8      	; 0x1676 <__fp_round+0x20>
    166e:	6f 5f       	subi	r22, 0xFF	; 255
    1670:	7f 4f       	sbci	r23, 0xFF	; 255
    1672:	8f 4f       	sbci	r24, 0xFF	; 255
    1674:	9f 4f       	sbci	r25, 0xFF	; 255
    1676:	08 95       	ret

00001678 <__fp_split3>:
    1678:	57 fd       	sbrc	r21, 7
    167a:	90 58       	subi	r25, 0x80	; 128
    167c:	44 0f       	add	r20, r20
    167e:	55 1f       	adc	r21, r21
    1680:	59 f0       	breq	.+22     	; 0x1698 <__fp_splitA+0x10>
    1682:	5f 3f       	cpi	r21, 0xFF	; 255
    1684:	71 f0       	breq	.+28     	; 0x16a2 <__fp_splitA+0x1a>
    1686:	47 95       	ror	r20

00001688 <__fp_splitA>:
    1688:	88 0f       	add	r24, r24
    168a:	97 fb       	bst	r25, 7
    168c:	99 1f       	adc	r25, r25
    168e:	61 f0       	breq	.+24     	; 0x16a8 <__fp_splitA+0x20>
    1690:	9f 3f       	cpi	r25, 0xFF	; 255
    1692:	79 f0       	breq	.+30     	; 0x16b2 <__fp_splitA+0x2a>
    1694:	87 95       	ror	r24
    1696:	08 95       	ret
    1698:	12 16       	cp	r1, r18
    169a:	13 06       	cpc	r1, r19
    169c:	14 06       	cpc	r1, r20
    169e:	55 1f       	adc	r21, r21
    16a0:	f2 cf       	rjmp	.-28     	; 0x1686 <__fp_split3+0xe>
    16a2:	46 95       	lsr	r20
    16a4:	f1 df       	rcall	.-30     	; 0x1688 <__fp_splitA>
    16a6:	08 c0       	rjmp	.+16     	; 0x16b8 <__fp_splitA+0x30>
    16a8:	16 16       	cp	r1, r22
    16aa:	17 06       	cpc	r1, r23
    16ac:	18 06       	cpc	r1, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	f1 cf       	rjmp	.-30     	; 0x1694 <__fp_splitA+0xc>
    16b2:	86 95       	lsr	r24
    16b4:	71 05       	cpc	r23, r1
    16b6:	61 05       	cpc	r22, r1
    16b8:	08 94       	sec
    16ba:	08 95       	ret

000016bc <__fp_zero>:
    16bc:	e8 94       	clt

000016be <__fp_szero>:
    16be:	bb 27       	eor	r27, r27
    16c0:	66 27       	eor	r22, r22
    16c2:	77 27       	eor	r23, r23
    16c4:	cb 01       	movw	r24, r22
    16c6:	97 f9       	bld	r25, 7
    16c8:	08 95       	ret

000016ca <__mulsf3>:
    16ca:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__mulsf3x>
    16ce:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_round>
    16d2:	0e 94 1d 0b 	call	0x163a	; 0x163a <__fp_pscA>
    16d6:	38 f0       	brcs	.+14     	; 0x16e6 <__mulsf3+0x1c>
    16d8:	0e 94 24 0b 	call	0x1648	; 0x1648 <__fp_pscB>
    16dc:	20 f0       	brcs	.+8      	; 0x16e6 <__mulsf3+0x1c>
    16de:	95 23       	and	r25, r21
    16e0:	11 f0       	breq	.+4      	; 0x16e6 <__mulsf3+0x1c>
    16e2:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__fp_inf>
    16e6:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_nan>
    16ea:	11 24       	eor	r1, r1
    16ec:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_szero>

000016f0 <__mulsf3x>:
    16f0:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__fp_split3>
    16f4:	70 f3       	brcs	.-36     	; 0x16d2 <__mulsf3+0x8>

000016f6 <__mulsf3_pse>:
    16f6:	95 9f       	mul	r25, r21
    16f8:	c1 f3       	breq	.-16     	; 0x16ea <__mulsf3+0x20>
    16fa:	95 0f       	add	r25, r21
    16fc:	50 e0       	ldi	r21, 0x00	; 0
    16fe:	55 1f       	adc	r21, r21
    1700:	62 9f       	mul	r22, r18
    1702:	f0 01       	movw	r30, r0
    1704:	72 9f       	mul	r23, r18
    1706:	bb 27       	eor	r27, r27
    1708:	f0 0d       	add	r31, r0
    170a:	b1 1d       	adc	r27, r1
    170c:	63 9f       	mul	r22, r19
    170e:	aa 27       	eor	r26, r26
    1710:	f0 0d       	add	r31, r0
    1712:	b1 1d       	adc	r27, r1
    1714:	aa 1f       	adc	r26, r26
    1716:	64 9f       	mul	r22, r20
    1718:	66 27       	eor	r22, r22
    171a:	b0 0d       	add	r27, r0
    171c:	a1 1d       	adc	r26, r1
    171e:	66 1f       	adc	r22, r22
    1720:	82 9f       	mul	r24, r18
    1722:	22 27       	eor	r18, r18
    1724:	b0 0d       	add	r27, r0
    1726:	a1 1d       	adc	r26, r1
    1728:	62 1f       	adc	r22, r18
    172a:	73 9f       	mul	r23, r19
    172c:	b0 0d       	add	r27, r0
    172e:	a1 1d       	adc	r26, r1
    1730:	62 1f       	adc	r22, r18
    1732:	83 9f       	mul	r24, r19
    1734:	a0 0d       	add	r26, r0
    1736:	61 1d       	adc	r22, r1
    1738:	22 1f       	adc	r18, r18
    173a:	74 9f       	mul	r23, r20
    173c:	33 27       	eor	r19, r19
    173e:	a0 0d       	add	r26, r0
    1740:	61 1d       	adc	r22, r1
    1742:	23 1f       	adc	r18, r19
    1744:	84 9f       	mul	r24, r20
    1746:	60 0d       	add	r22, r0
    1748:	21 1d       	adc	r18, r1
    174a:	82 2f       	mov	r24, r18
    174c:	76 2f       	mov	r23, r22
    174e:	6a 2f       	mov	r22, r26
    1750:	11 24       	eor	r1, r1
    1752:	9f 57       	subi	r25, 0x7F	; 127
    1754:	50 40       	sbci	r21, 0x00	; 0
    1756:	9a f0       	brmi	.+38     	; 0x177e <__mulsf3_pse+0x88>
    1758:	f1 f0       	breq	.+60     	; 0x1796 <__mulsf3_pse+0xa0>
    175a:	88 23       	and	r24, r24
    175c:	4a f0       	brmi	.+18     	; 0x1770 <__mulsf3_pse+0x7a>
    175e:	ee 0f       	add	r30, r30
    1760:	ff 1f       	adc	r31, r31
    1762:	bb 1f       	adc	r27, r27
    1764:	66 1f       	adc	r22, r22
    1766:	77 1f       	adc	r23, r23
    1768:	88 1f       	adc	r24, r24
    176a:	91 50       	subi	r25, 0x01	; 1
    176c:	50 40       	sbci	r21, 0x00	; 0
    176e:	a9 f7       	brne	.-22     	; 0x175a <__mulsf3_pse+0x64>
    1770:	9e 3f       	cpi	r25, 0xFE	; 254
    1772:	51 05       	cpc	r21, r1
    1774:	80 f0       	brcs	.+32     	; 0x1796 <__mulsf3_pse+0xa0>
    1776:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__fp_inf>
    177a:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_szero>
    177e:	5f 3f       	cpi	r21, 0xFF	; 255
    1780:	e4 f3       	brlt	.-8      	; 0x177a <__mulsf3_pse+0x84>
    1782:	98 3e       	cpi	r25, 0xE8	; 232
    1784:	d4 f3       	brlt	.-12     	; 0x177a <__mulsf3_pse+0x84>
    1786:	86 95       	lsr	r24
    1788:	77 95       	ror	r23
    178a:	67 95       	ror	r22
    178c:	b7 95       	ror	r27
    178e:	f7 95       	ror	r31
    1790:	e7 95       	ror	r30
    1792:	9f 5f       	subi	r25, 0xFF	; 255
    1794:	c1 f7       	brne	.-16     	; 0x1786 <__mulsf3_pse+0x90>
    1796:	fe 2b       	or	r31, r30
    1798:	88 0f       	add	r24, r24
    179a:	91 1d       	adc	r25, r1
    179c:	96 95       	lsr	r25
    179e:	87 95       	ror	r24
    17a0:	97 f9       	bld	r25, 7
    17a2:	08 95       	ret

000017a4 <pow>:
    17a4:	fa 01       	movw	r30, r20
    17a6:	ee 0f       	add	r30, r30
    17a8:	ff 1f       	adc	r31, r31
    17aa:	30 96       	adiw	r30, 0x00	; 0
    17ac:	21 05       	cpc	r18, r1
    17ae:	31 05       	cpc	r19, r1
    17b0:	a1 f1       	breq	.+104    	; 0x181a <pow+0x76>
    17b2:	61 15       	cp	r22, r1
    17b4:	71 05       	cpc	r23, r1
    17b6:	61 f4       	brne	.+24     	; 0x17d0 <pow+0x2c>
    17b8:	80 38       	cpi	r24, 0x80	; 128
    17ba:	bf e3       	ldi	r27, 0x3F	; 63
    17bc:	9b 07       	cpc	r25, r27
    17be:	49 f1       	breq	.+82     	; 0x1812 <pow+0x6e>
    17c0:	68 94       	set
    17c2:	90 38       	cpi	r25, 0x80	; 128
    17c4:	81 05       	cpc	r24, r1
    17c6:	61 f0       	breq	.+24     	; 0x17e0 <pow+0x3c>
    17c8:	80 38       	cpi	r24, 0x80	; 128
    17ca:	bf ef       	ldi	r27, 0xFF	; 255
    17cc:	9b 07       	cpc	r25, r27
    17ce:	41 f0       	breq	.+16     	; 0x17e0 <pow+0x3c>
    17d0:	99 23       	and	r25, r25
    17d2:	4a f5       	brpl	.+82     	; 0x1826 <pow+0x82>
    17d4:	ff 3f       	cpi	r31, 0xFF	; 255
    17d6:	e1 05       	cpc	r30, r1
    17d8:	31 05       	cpc	r19, r1
    17da:	21 05       	cpc	r18, r1
    17dc:	19 f1       	breq	.+70     	; 0x1824 <pow+0x80>
    17de:	e8 94       	clt
    17e0:	08 94       	sec
    17e2:	e7 95       	ror	r30
    17e4:	d9 01       	movw	r26, r18
    17e6:	aa 23       	and	r26, r26
    17e8:	29 f4       	brne	.+10     	; 0x17f4 <pow+0x50>
    17ea:	ab 2f       	mov	r26, r27
    17ec:	be 2f       	mov	r27, r30
    17ee:	f8 5f       	subi	r31, 0xF8	; 248
    17f0:	d0 f3       	brcs	.-12     	; 0x17e6 <pow+0x42>
    17f2:	10 c0       	rjmp	.+32     	; 0x1814 <pow+0x70>
    17f4:	ff 5f       	subi	r31, 0xFF	; 255
    17f6:	70 f4       	brcc	.+28     	; 0x1814 <pow+0x70>
    17f8:	a6 95       	lsr	r26
    17fa:	e0 f7       	brcc	.-8      	; 0x17f4 <pow+0x50>
    17fc:	f7 39       	cpi	r31, 0x97	; 151
    17fe:	50 f0       	brcs	.+20     	; 0x1814 <pow+0x70>
    1800:	19 f0       	breq	.+6      	; 0x1808 <pow+0x64>
    1802:	ff 3a       	cpi	r31, 0xAF	; 175
    1804:	38 f4       	brcc	.+14     	; 0x1814 <pow+0x70>
    1806:	9f 77       	andi	r25, 0x7F	; 127
    1808:	9f 93       	push	r25
    180a:	0d d0       	rcall	.+26     	; 0x1826 <pow+0x82>
    180c:	0f 90       	pop	r0
    180e:	07 fc       	sbrc	r0, 7
    1810:	90 58       	subi	r25, 0x80	; 128
    1812:	08 95       	ret
    1814:	46 f0       	brts	.+16     	; 0x1826 <pow+0x82>
    1816:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_nan>
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	80 e8       	ldi	r24, 0x80	; 128
    1820:	9f e3       	ldi	r25, 0x3F	; 63
    1822:	08 95       	ret
    1824:	4f e7       	ldi	r20, 0x7F	; 127
    1826:	9f 77       	andi	r25, 0x7F	; 127
    1828:	5f 93       	push	r21
    182a:	4f 93       	push	r20
    182c:	3f 93       	push	r19
    182e:	2f 93       	push	r18
    1830:	0e 94 cd 0c 	call	0x199a	; 0x199a <log>
    1834:	2f 91       	pop	r18
    1836:	3f 91       	pop	r19
    1838:	4f 91       	pop	r20
    183a:	5f 91       	pop	r21
    183c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__mulsf3>
    1840:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <exp>
    1844:	29 f4       	brne	.+10     	; 0x1850 <pow+0xac>
    1846:	16 f0       	brts	.+4      	; 0x184c <pow+0xa8>
    1848:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__fp_inf>
    184c:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__fp_zero>
    1850:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_nan>

00001854 <exp>:
    1854:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fp_splitA>
    1858:	a8 f3       	brcs	.-22     	; 0x1844 <pow+0xa0>
    185a:	96 38       	cpi	r25, 0x86	; 134
    185c:	a0 f7       	brcc	.-24     	; 0x1846 <pow+0xa2>
    185e:	07 f8       	bld	r0, 7
    1860:	0f 92       	push	r0
    1862:	e8 94       	clt
    1864:	2b e3       	ldi	r18, 0x3B	; 59
    1866:	3a ea       	ldi	r19, 0xAA	; 170
    1868:	48 eb       	ldi	r20, 0xB8	; 184
    186a:	5f e7       	ldi	r21, 0x7F	; 127
    186c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3_pse>
    1870:	0f 92       	push	r0
    1872:	0f 92       	push	r0
    1874:	0f 92       	push	r0
    1876:	4d b7       	in	r20, 0x3d	; 61
    1878:	5e b7       	in	r21, 0x3e	; 62
    187a:	0f 92       	push	r0
    187c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <modf>
    1880:	e4 e5       	ldi	r30, 0x54	; 84
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__fp_powser>
    1888:	4f 91       	pop	r20
    188a:	5f 91       	pop	r21
    188c:	ef 91       	pop	r30
    188e:	ff 91       	pop	r31
    1890:	e5 95       	asr	r30
    1892:	ee 1f       	adc	r30, r30
    1894:	ff 1f       	adc	r31, r31
    1896:	49 f0       	breq	.+18     	; 0x18aa <exp+0x56>
    1898:	fe 57       	subi	r31, 0x7E	; 126
    189a:	e0 68       	ori	r30, 0x80	; 128
    189c:	44 27       	eor	r20, r20
    189e:	ee 0f       	add	r30, r30
    18a0:	44 1f       	adc	r20, r20
    18a2:	fa 95       	dec	r31
    18a4:	e1 f7       	brne	.-8      	; 0x189e <exp+0x4a>
    18a6:	41 95       	neg	r20
    18a8:	55 0b       	sbc	r21, r21
    18aa:	0e 94 8f 0c 	call	0x191e	; 0x191e <ldexp>
    18ae:	0f 90       	pop	r0
    18b0:	07 fe       	sbrs	r0, 7
    18b2:	0c 94 83 0c 	jmp	0x1906	; 0x1906 <inverse>
    18b6:	08 95       	ret

000018b8 <__fp_powser>:
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	1f 93       	push	r17
    18be:	0f 93       	push	r16
    18c0:	ff 92       	push	r15
    18c2:	ef 92       	push	r14
    18c4:	df 92       	push	r13
    18c6:	7b 01       	movw	r14, r22
    18c8:	8c 01       	movw	r16, r24
    18ca:	68 94       	set
    18cc:	06 c0       	rjmp	.+12     	; 0x18da <__fp_powser+0x22>
    18ce:	da 2e       	mov	r13, r26
    18d0:	ef 01       	movw	r28, r30
    18d2:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__mulsf3x>
    18d6:	fe 01       	movw	r30, r28
    18d8:	e8 94       	clt
    18da:	a5 91       	lpm	r26, Z+
    18dc:	25 91       	lpm	r18, Z+
    18de:	35 91       	lpm	r19, Z+
    18e0:	45 91       	lpm	r20, Z+
    18e2:	55 91       	lpm	r21, Z+
    18e4:	a6 f3       	brts	.-24     	; 0x18ce <__fp_powser+0x16>
    18e6:	ef 01       	movw	r28, r30
    18e8:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__addsf3x>
    18ec:	fe 01       	movw	r30, r28
    18ee:	97 01       	movw	r18, r14
    18f0:	a8 01       	movw	r20, r16
    18f2:	da 94       	dec	r13
    18f4:	69 f7       	brne	.-38     	; 0x18d0 <__fp_powser+0x18>
    18f6:	df 90       	pop	r13
    18f8:	ef 90       	pop	r14
    18fa:	ff 90       	pop	r15
    18fc:	0f 91       	pop	r16
    18fe:	1f 91       	pop	r17
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <inverse>:
    1906:	9b 01       	movw	r18, r22
    1908:	ac 01       	movw	r20, r24
    190a:	60 e0       	ldi	r22, 0x00	; 0
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	80 e8       	ldi	r24, 0x80	; 128
    1910:	9f e3       	ldi	r25, 0x3F	; 63
    1912:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__divsf3>
    1916:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__fp_inf>
    191a:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <__fp_mpack>

0000191e <ldexp>:
    191e:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fp_splitA>
    1922:	d8 f3       	brcs	.-10     	; 0x191a <inverse+0x14>
    1924:	99 23       	and	r25, r25
    1926:	c9 f3       	breq	.-14     	; 0x191a <inverse+0x14>
    1928:	94 0f       	add	r25, r20
    192a:	51 1d       	adc	r21, r1
    192c:	a3 f3       	brvs	.-24     	; 0x1916 <inverse+0x10>
    192e:	91 50       	subi	r25, 0x01	; 1
    1930:	50 40       	sbci	r21, 0x00	; 0
    1932:	94 f0       	brlt	.+36     	; 0x1958 <ldexp+0x3a>
    1934:	59 f0       	breq	.+22     	; 0x194c <ldexp+0x2e>
    1936:	88 23       	and	r24, r24
    1938:	32 f0       	brmi	.+12     	; 0x1946 <ldexp+0x28>
    193a:	66 0f       	add	r22, r22
    193c:	77 1f       	adc	r23, r23
    193e:	88 1f       	adc	r24, r24
    1940:	91 50       	subi	r25, 0x01	; 1
    1942:	50 40       	sbci	r21, 0x00	; 0
    1944:	c1 f7       	brne	.-16     	; 0x1936 <ldexp+0x18>
    1946:	9e 3f       	cpi	r25, 0xFE	; 254
    1948:	51 05       	cpc	r21, r1
    194a:	2c f7       	brge	.-54     	; 0x1916 <inverse+0x10>
    194c:	88 0f       	add	r24, r24
    194e:	91 1d       	adc	r25, r1
    1950:	96 95       	lsr	r25
    1952:	87 95       	ror	r24
    1954:	97 f9       	bld	r25, 7
    1956:	08 95       	ret
    1958:	5f 3f       	cpi	r21, 0xFF	; 255
    195a:	ac f0       	brlt	.+42     	; 0x1986 <ldexp+0x68>
    195c:	98 3e       	cpi	r25, 0xE8	; 232
    195e:	9c f0       	brlt	.+38     	; 0x1986 <ldexp+0x68>
    1960:	bb 27       	eor	r27, r27
    1962:	86 95       	lsr	r24
    1964:	77 95       	ror	r23
    1966:	67 95       	ror	r22
    1968:	b7 95       	ror	r27
    196a:	08 f4       	brcc	.+2      	; 0x196e <ldexp+0x50>
    196c:	b1 60       	ori	r27, 0x01	; 1
    196e:	93 95       	inc	r25
    1970:	c1 f7       	brne	.-16     	; 0x1962 <ldexp+0x44>
    1972:	bb 0f       	add	r27, r27
    1974:	58 f7       	brcc	.-42     	; 0x194c <ldexp+0x2e>
    1976:	11 f4       	brne	.+4      	; 0x197c <ldexp+0x5e>
    1978:	60 ff       	sbrs	r22, 0
    197a:	e8 cf       	rjmp	.-48     	; 0x194c <ldexp+0x2e>
    197c:	6f 5f       	subi	r22, 0xFF	; 255
    197e:	7f 4f       	sbci	r23, 0xFF	; 255
    1980:	8f 4f       	sbci	r24, 0xFF	; 255
    1982:	9f 4f       	sbci	r25, 0xFF	; 255
    1984:	e3 cf       	rjmp	.-58     	; 0x194c <ldexp+0x2e>
    1986:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_szero>
    198a:	16 f0       	brts	.+4      	; 0x1990 <ldexp+0x72>
    198c:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <__fp_mpack>
    1990:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_nan>
    1994:	68 94       	set
    1996:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__fp_inf>

0000199a <log>:
    199a:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fp_splitA>
    199e:	a8 f3       	brcs	.-22     	; 0x198a <ldexp+0x6c>
    19a0:	99 23       	and	r25, r25
    19a2:	c1 f3       	breq	.-16     	; 0x1994 <ldexp+0x76>
    19a4:	ae f3       	brts	.-22     	; 0x1990 <ldexp+0x72>
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	1f 93       	push	r17
    19ac:	0f 93       	push	r16
    19ae:	ff 92       	push	r15
    19b0:	c9 2f       	mov	r28, r25
    19b2:	dd 27       	eor	r29, r29
    19b4:	88 23       	and	r24, r24
    19b6:	2a f0       	brmi	.+10     	; 0x19c2 <log+0x28>
    19b8:	21 97       	sbiw	r28, 0x01	; 1
    19ba:	66 0f       	add	r22, r22
    19bc:	77 1f       	adc	r23, r23
    19be:	88 1f       	adc	r24, r24
    19c0:	da f7       	brpl	.-10     	; 0x19b8 <log+0x1e>
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e8       	ldi	r20, 0x80	; 128
    19c8:	5f eb       	ldi	r21, 0xBF	; 191
    19ca:	9f e3       	ldi	r25, 0x3F	; 63
    19cc:	88 39       	cpi	r24, 0x98	; 152
    19ce:	20 f0       	brcs	.+8      	; 0x19d8 <log+0x3e>
    19d0:	80 3e       	cpi	r24, 0xE0	; 224
    19d2:	38 f0       	brcs	.+14     	; 0x19e2 <log+0x48>
    19d4:	21 96       	adiw	r28, 0x01	; 1
    19d6:	8f 77       	andi	r24, 0x7F	; 127
    19d8:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
    19dc:	ec e7       	ldi	r30, 0x7C	; 124
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	04 c0       	rjmp	.+8      	; 0x19ea <log+0x50>
    19e2:	0e 94 c3 09 	call	0x1386	; 0x1386 <__addsf3>
    19e6:	e9 ea       	ldi	r30, 0xA9	; 169
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__fp_powser>
    19ee:	8b 01       	movw	r16, r22
    19f0:	be 01       	movw	r22, r28
    19f2:	ec 01       	movw	r28, r24
    19f4:	fb 2e       	mov	r15, r27
    19f6:	6f 57       	subi	r22, 0x7F	; 127
    19f8:	71 09       	sbc	r23, r1
    19fa:	75 95       	asr	r23
    19fc:	77 1f       	adc	r23, r23
    19fe:	88 0b       	sbc	r24, r24
    1a00:	99 0b       	sbc	r25, r25
    1a02:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__floatsisf>
    1a06:	28 e1       	ldi	r18, 0x18	; 24
    1a08:	32 e7       	ldi	r19, 0x72	; 114
    1a0a:	41 e3       	ldi	r20, 0x31	; 49
    1a0c:	5f e3       	ldi	r21, 0x3F	; 63
    1a0e:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__mulsf3x>
    1a12:	af 2d       	mov	r26, r15
    1a14:	98 01       	movw	r18, r16
    1a16:	ae 01       	movw	r20, r28
    1a18:	ff 90       	pop	r15
    1a1a:	0f 91       	pop	r16
    1a1c:	1f 91       	pop	r17
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__addsf3x>
    1a26:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_round>

00001a2a <modf>:
    1a2a:	fa 01       	movw	r30, r20
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	aa 0f       	add	r26, r26
    1a30:	bb 1f       	adc	r27, r27
    1a32:	9b 01       	movw	r18, r22
    1a34:	ac 01       	movw	r20, r24
    1a36:	bf 57       	subi	r27, 0x7F	; 127
    1a38:	28 f4       	brcc	.+10     	; 0x1a44 <modf+0x1a>
    1a3a:	22 27       	eor	r18, r18
    1a3c:	33 27       	eor	r19, r19
    1a3e:	44 27       	eor	r20, r20
    1a40:	50 78       	andi	r21, 0x80	; 128
    1a42:	20 c0       	rjmp	.+64     	; 0x1a84 <modf+0x5a>
    1a44:	b7 51       	subi	r27, 0x17	; 23
    1a46:	90 f4       	brcc	.+36     	; 0x1a6c <modf+0x42>
    1a48:	ab 2f       	mov	r26, r27
    1a4a:	00 24       	eor	r0, r0
    1a4c:	46 95       	lsr	r20
    1a4e:	37 95       	ror	r19
    1a50:	27 95       	ror	r18
    1a52:	01 1c       	adc	r0, r1
    1a54:	a3 95       	inc	r26
    1a56:	d2 f3       	brmi	.-12     	; 0x1a4c <modf+0x22>
    1a58:	00 20       	and	r0, r0
    1a5a:	71 f0       	breq	.+28     	; 0x1a78 <modf+0x4e>
    1a5c:	22 0f       	add	r18, r18
    1a5e:	33 1f       	adc	r19, r19
    1a60:	44 1f       	adc	r20, r20
    1a62:	b3 95       	inc	r27
    1a64:	da f3       	brmi	.-10     	; 0x1a5c <modf+0x32>
    1a66:	0e d0       	rcall	.+28     	; 0x1a84 <modf+0x5a>
    1a68:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__subsf3>
    1a6c:	61 30       	cpi	r22, 0x01	; 1
    1a6e:	71 05       	cpc	r23, r1
    1a70:	a0 e8       	ldi	r26, 0x80	; 128
    1a72:	8a 07       	cpc	r24, r26
    1a74:	b9 46       	sbci	r27, 0x69	; 105
    1a76:	30 f4       	brcc	.+12     	; 0x1a84 <modf+0x5a>
    1a78:	9b 01       	movw	r18, r22
    1a7a:	ac 01       	movw	r20, r24
    1a7c:	66 27       	eor	r22, r22
    1a7e:	77 27       	eor	r23, r23
    1a80:	88 27       	eor	r24, r24
    1a82:	90 78       	andi	r25, 0x80	; 128
    1a84:	30 96       	adiw	r30, 0x00	; 0
    1a86:	21 f0       	breq	.+8      	; 0x1a90 <modf+0x66>
    1a88:	20 83       	st	Z, r18
    1a8a:	31 83       	std	Z+1, r19	; 0x01
    1a8c:	42 83       	std	Z+2, r20	; 0x02
    1a8e:	53 83       	std	Z+3, r21	; 0x03
    1a90:	08 95       	ret

00001a92 <__fp_mpack>:
    1a92:	9f 3f       	cpi	r25, 0xFF	; 255
    1a94:	31 f0       	breq	.+12     	; 0x1aa2 <__fp_mpack_finite+0xc>

00001a96 <__fp_mpack_finite>:
    1a96:	91 50       	subi	r25, 0x01	; 1
    1a98:	20 f4       	brcc	.+8      	; 0x1aa2 <__fp_mpack_finite+0xc>
    1a9a:	87 95       	ror	r24
    1a9c:	77 95       	ror	r23
    1a9e:	67 95       	ror	r22
    1aa0:	b7 95       	ror	r27
    1aa2:	88 0f       	add	r24, r24
    1aa4:	91 1d       	adc	r25, r1
    1aa6:	96 95       	lsr	r25
    1aa8:	87 95       	ror	r24
    1aaa:	97 f9       	bld	r25, 7
    1aac:	08 95       	ret

00001aae <__divmodhi4>:
    1aae:	97 fb       	bst	r25, 7
    1ab0:	07 2e       	mov	r0, r23
    1ab2:	16 f4       	brtc	.+4      	; 0x1ab8 <__divmodhi4+0xa>
    1ab4:	00 94       	com	r0
    1ab6:	07 d0       	rcall	.+14     	; 0x1ac6 <__divmodhi4_neg1>
    1ab8:	77 fd       	sbrc	r23, 7
    1aba:	09 d0       	rcall	.+18     	; 0x1ace <__divmodhi4_neg2>
    1abc:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__udivmodhi4>
    1ac0:	07 fc       	sbrc	r0, 7
    1ac2:	05 d0       	rcall	.+10     	; 0x1ace <__divmodhi4_neg2>
    1ac4:	3e f4       	brtc	.+14     	; 0x1ad4 <__divmodhi4_exit>

00001ac6 <__divmodhi4_neg1>:
    1ac6:	90 95       	com	r25
    1ac8:	81 95       	neg	r24
    1aca:	9f 4f       	sbci	r25, 0xFF	; 255
    1acc:	08 95       	ret

00001ace <__divmodhi4_neg2>:
    1ace:	70 95       	com	r23
    1ad0:	61 95       	neg	r22
    1ad2:	7f 4f       	sbci	r23, 0xFF	; 255

00001ad4 <__divmodhi4_exit>:
    1ad4:	08 95       	ret

00001ad6 <__udivmodhi4>:
    1ad6:	aa 1b       	sub	r26, r26
    1ad8:	bb 1b       	sub	r27, r27
    1ada:	51 e1       	ldi	r21, 0x11	; 17
    1adc:	07 c0       	rjmp	.+14     	; 0x1aec <__udivmodhi4_ep>

00001ade <__udivmodhi4_loop>:
    1ade:	aa 1f       	adc	r26, r26
    1ae0:	bb 1f       	adc	r27, r27
    1ae2:	a6 17       	cp	r26, r22
    1ae4:	b7 07       	cpc	r27, r23
    1ae6:	10 f0       	brcs	.+4      	; 0x1aec <__udivmodhi4_ep>
    1ae8:	a6 1b       	sub	r26, r22
    1aea:	b7 0b       	sbc	r27, r23

00001aec <__udivmodhi4_ep>:
    1aec:	88 1f       	adc	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	5a 95       	dec	r21
    1af2:	a9 f7       	brne	.-22     	; 0x1ade <__udivmodhi4_loop>
    1af4:	80 95       	com	r24
    1af6:	90 95       	com	r25
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	08 95       	ret

00001afe <_exit>:
    1afe:	f8 94       	cli

00001b00 <__stop_program>:
    1b00:	ff cf       	rjmp	.-2      	; 0x1b00 <__stop_program>
